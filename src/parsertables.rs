//! This is a code generated LALR parser table, do not modify.
//! Exists to avoid having to parse the JSON version and to use
//! compile-time perfect hash-maps.
use phf::phf_map;

pub struct ParserTables<'a> {
    pub nonterminals: &'a[&'a str],
    pub rules_to_nonterminals: &'a[usize],
    pub rule_lengths: &'a[usize],
    pub table: &'a[phf::Map<&'static str, usize>],
    pub goto: phf::Map<usize, &'static phf::Map<usize, usize>>
}

#[derive(PartialEq)]
pub enum TableAction {
    Reduce(usize, usize, String, usize), // rule, count, and name and id of nonterminal
    Shift(usize), // Target state number
    None // No match
}

impl ParserTables<'_> {
    // Decodes an action from the table.
    pub fn get_action(&self, state: usize, token: String) -> TableAction {
        if state > self.table.len() {
            // Maybe we should have a more specific return for this.
            println!("Something is wrong, you are looking for state {} when there is no such state", state);
            return TableAction::None;
        }
        let val = self.table[state].get(&token);
        match val {
            None => {
                TableAction::None
            },
            Some(v) => {
                if v % 2 == 0 {
                    // Even ones are shifts.
                    TableAction::Shift(v/2)
                } else {
                    let rule = (v-1)/2;
                    let nt_id: usize = self.rules_to_nonterminals[rule];
                    TableAction::Reduce(rule, self.rule_lengths[rule], self.nonterminals[nt_id].to_string(), nt_id)
                }
            }
        }
    }
}

type NestedMap = phf::Map<usize, usize>;static NESTED_GOTO_90: NestedMap = phf_map!{
  2usize => 32usize,
  7usize => 42usize,
  13usize => 34usize,
  15usize => 39usize,
  12usize => 19usize,
  3usize => 7usize,
  14usize => 25usize,
  10usize => 141usize,
  1usize => 31usize,
  6usize => 8usize,
  0usize => 41usize,
  5usize => 28usize,
  8usize => 3usize,
  9usize => 33usize,
  4usize => 29usize,
  11usize => 36usize
};

static NESTED_GOTO_174: NestedMap = phf_map!{
  17usize => 179usize
};

static NESTED_GOTO_128: NestedMap = phf_map!{
  9usize => 33usize,
  7usize => 42usize,
  1usize => 31usize,
  4usize => 29usize,
  16usize => 165usize,
  2usize => 32usize,
  3usize => 7usize,
  14usize => 25usize,
  15usize => 39usize,
  5usize => 28usize,
  12usize => 19usize,
  10usize => 45usize,
  11usize => 36usize,
  6usize => 8usize,
  0usize => 41usize,
  8usize => 3usize,
  13usize => 34usize
};

static NESTED_GOTO_104: NestedMap = phf_map!{
  1usize => 31usize,
  7usize => 42usize,
  2usize => 32usize,
  10usize => 154usize,
  8usize => 3usize,
  6usize => 8usize,
  13usize => 34usize,
  0usize => 41usize,
  11usize => 36usize,
  5usize => 28usize,
  15usize => 39usize,
  4usize => 29usize,
  3usize => 7usize,
  14usize => 25usize,
  9usize => 33usize,
  12usize => 19usize
};

static NESTED_GOTO_38: NestedMap = phf_map!{
  7usize => 42usize,
  10usize => 76usize,
  11usize => 36usize,
  12usize => 19usize,
  14usize => 25usize,
  13usize => 34usize,
  2usize => 32usize,
  3usize => 7usize,
  6usize => 8usize,
  0usize => 41usize,
  15usize => 39usize,
  5usize => 28usize,
  1usize => 31usize,
  8usize => 3usize,
  9usize => 33usize,
  4usize => 29usize
};

static NESTED_GOTO_169: NestedMap = phf_map!{
  7usize => 42usize,
  8usize => 3usize,
  9usize => 33usize,
  6usize => 8usize,
  10usize => 45usize,
  16usize => 176usize,
  4usize => 29usize,
  3usize => 7usize,
  15usize => 39usize,
  11usize => 36usize,
  1usize => 31usize,
  13usize => 34usize,
  12usize => 19usize,
  14usize => 25usize,
  0usize => 41usize,
  5usize => 28usize,
  2usize => 32usize
};

static NESTED_GOTO_122: NestedMap = phf_map!{
  5usize => 28usize,
  6usize => 8usize,
  7usize => 42usize,
  8usize => 3usize,
  4usize => 29usize,
  0usize => 41usize,
  13usize => 34usize,
  16usize => 164usize,
  2usize => 32usize,
  1usize => 31usize,
  3usize => 7usize,
  14usize => 25usize,
  15usize => 39usize,
  10usize => 45usize,
  11usize => 36usize,
  12usize => 19usize,
  9usize => 33usize
};

static NESTED_GOTO_11: NestedMap = phf_map!{
  13usize => 34usize,
  16usize => 55usize,
  8usize => 3usize,
  12usize => 19usize,
  5usize => 28usize,
  4usize => 29usize,
  7usize => 42usize,
  9usize => 33usize,
  2usize => 32usize,
  11usize => 36usize,
  1usize => 31usize,
  0usize => 41usize,
  14usize => 25usize,
  15usize => 39usize,
  6usize => 8usize,
  3usize => 7usize,
  10usize => 45usize
};

static NESTED_GOTO_20: NestedMap = phf_map!{
  0usize => 41usize,
  18usize => 63usize,
  3usize => 7usize,
  8usize => 3usize,
  9usize => 33usize,
  6usize => 8usize,
  12usize => 19usize,
  15usize => 39usize,
  4usize => 29usize,
  13usize => 34usize,
  7usize => 42usize,
  2usize => 32usize,
  5usize => 28usize,
  10usize => 45usize,
  1usize => 31usize,
  14usize => 25usize,
  16usize => 56usize,
  11usize => 36usize
};

static NESTED_GOTO_96: NestedMap = phf_map!{
  2usize => 32usize,
  1usize => 31usize,
  7usize => 42usize,
  0usize => 41usize,
  10usize => 147usize,
  5usize => 28usize,
  12usize => 19usize,
  11usize => 36usize,
  14usize => 25usize,
  6usize => 8usize,
  8usize => 3usize,
  3usize => 7usize,
  13usize => 34usize,
  4usize => 29usize,
  9usize => 33usize,
  15usize => 39usize
};

static NESTED_GOTO_113: NestedMap = phf_map!{
  6usize => 8usize,
  11usize => 36usize,
  9usize => 33usize,
  1usize => 31usize,
  14usize => 25usize,
  5usize => 28usize,
  4usize => 29usize,
  10usize => 162usize,
  12usize => 19usize,
  0usize => 41usize,
  2usize => 32usize,
  3usize => 7usize,
  8usize => 3usize,
  7usize => 42usize,
  13usize => 34usize,
  15usize => 39usize
};

static NESTED_GOTO_182: NestedMap = phf_map!{
  22usize => 183usize
};

static NESTED_GOTO_87: NestedMap = phf_map!{
  10usize => 138usize,
  9usize => 33usize,
  1usize => 31usize,
  0usize => 41usize,
  13usize => 34usize,
  3usize => 7usize,
  5usize => 28usize,
  4usize => 29usize,
  7usize => 42usize,
  12usize => 19usize,
  15usize => 39usize,
  11usize => 36usize,
  6usize => 8usize,
  14usize => 25usize,
  8usize => 3usize,
  2usize => 32usize
};

static NESTED_GOTO_27: NestedMap = phf_map!{
  7usize => 42usize,
  13usize => 34usize,
  6usize => 8usize,
  0usize => 41usize,
  10usize => 71usize,
  9usize => 33usize,
  4usize => 29usize,
  12usize => 19usize,
  11usize => 36usize,
  14usize => 25usize,
  5usize => 28usize,
  3usize => 7usize,
  1usize => 31usize,
  2usize => 32usize,
  8usize => 3usize,
  15usize => 39usize
};

static NESTED_GOTO_83: NestedMap = phf_map!{
  12usize => 19usize,
  9usize => 33usize,
  14usize => 25usize,
  10usize => 134usize,
  5usize => 28usize,
  15usize => 39usize,
  1usize => 31usize,
  8usize => 3usize,
  11usize => 36usize,
  13usize => 34usize,
  7usize => 42usize,
  0usize => 41usize,
  2usize => 32usize,
  4usize => 29usize,
  3usize => 7usize,
  6usize => 8usize
};

static NESTED_GOTO_13: NestedMap = phf_map!{
  12usize => 19usize,
  14usize => 25usize,
  10usize => 58usize,
  6usize => 8usize,
  3usize => 7usize,
  1usize => 31usize,
  15usize => 39usize,
  0usize => 41usize,
  2usize => 32usize,
  9usize => 33usize,
  4usize => 29usize,
  7usize => 42usize,
  5usize => 28usize,
  11usize => 36usize,
  13usize => 34usize,
  8usize => 3usize
};

static NESTED_GOTO_167: NestedMap = phf_map!{
  11usize => 36usize,
  4usize => 29usize,
  2usize => 32usize,
  8usize => 3usize,
  0usize => 41usize,
  15usize => 39usize,
  5usize => 28usize,
  14usize => 25usize,
  7usize => 42usize,
  16usize => 175usize,
  1usize => 31usize,
  3usize => 7usize,
  9usize => 33usize,
  6usize => 8usize,
  12usize => 19usize,
  10usize => 45usize,
  13usize => 34usize
};

static NESTED_GOTO_91: NestedMap = phf_map!{
  2usize => 32usize,
  13usize => 34usize,
  7usize => 42usize,
  14usize => 25usize,
  9usize => 33usize,
  0usize => 41usize,
  4usize => 29usize,
  5usize => 28usize,
  10usize => 142usize,
  11usize => 36usize,
  6usize => 8usize,
  15usize => 39usize,
  3usize => 7usize,
  1usize => 31usize,
  8usize => 3usize,
  12usize => 19usize
};

static NESTED_GOTO_88: NestedMap = phf_map!{
  11usize => 36usize,
  6usize => 8usize,
  5usize => 28usize,
  7usize => 42usize,
  1usize => 31usize,
  2usize => 32usize,
  9usize => 33usize,
  13usize => 34usize,
  14usize => 25usize,
  4usize => 29usize,
  12usize => 19usize,
  10usize => 139usize,
  0usize => 41usize,
  8usize => 3usize,
  15usize => 39usize,
  3usize => 7usize
};

static NESTED_GOTO_21: NestedMap = phf_map!{
  16usize => 64usize,
  12usize => 19usize,
  10usize => 45usize,
  1usize => 31usize,
  11usize => 36usize,
  3usize => 7usize,
  2usize => 32usize,
  14usize => 25usize,
  9usize => 33usize,
  5usize => 28usize,
  15usize => 39usize,
  13usize => 34usize,
  4usize => 29usize,
  6usize => 8usize,
  8usize => 3usize,
  7usize => 42usize,
  0usize => 41usize
};

static NESTED_GOTO_109: NestedMap = phf_map!{
  0usize => 41usize,
  1usize => 31usize,
  6usize => 8usize,
  7usize => 42usize,
  3usize => 7usize,
  4usize => 29usize,
  2usize => 32usize,
  5usize => 28usize,
  14usize => 25usize,
  8usize => 3usize,
  13usize => 34usize,
  11usize => 36usize,
  10usize => 159usize,
  12usize => 19usize,
  15usize => 39usize,
  9usize => 33usize
};

static NESTED_GOTO_108: NestedMap = phf_map!{
  8usize => 3usize,
  12usize => 19usize,
  0usize => 41usize,
  5usize => 28usize,
  1usize => 31usize,
  7usize => 42usize,
  4usize => 29usize,
  2usize => 32usize,
  13usize => 34usize,
  3usize => 7usize,
  10usize => 158usize,
  6usize => 8usize,
  11usize => 36usize,
  9usize => 33usize,
  15usize => 39usize,
  14usize => 25usize
};

static NESTED_GOTO_85: NestedMap = phf_map!{
  15usize => 39usize,
  12usize => 19usize,
  2usize => 32usize,
  3usize => 7usize,
  5usize => 28usize,
  13usize => 34usize,
  9usize => 33usize,
  11usize => 36usize,
  1usize => 31usize,
  6usize => 8usize,
  0usize => 41usize,
  7usize => 42usize,
  4usize => 29usize,
  10usize => 136usize,
  14usize => 25usize,
  8usize => 3usize
};

static NESTED_GOTO_49: NestedMap = phf_map!{
  15usize => 39usize,
  7usize => 42usize,
  3usize => 7usize,
  8usize => 3usize,
  9usize => 33usize,
  1usize => 31usize,
  0usize => 41usize,
  11usize => 36usize,
  12usize => 19usize,
  4usize => 29usize,
  6usize => 8usize,
  5usize => 28usize,
  13usize => 34usize,
  14usize => 25usize,
  10usize => 117usize,
  2usize => 32usize
};

static NESTED_GOTO_32: NestedMap = phf_map!{
  3usize => 72usize,
  2usize => 32usize
};

static NESTED_GOTO_181: NestedMap = phf_map!{
  2usize => 32usize,
  4usize => 29usize,
  16usize => 182usize,
  15usize => 39usize,
  8usize => 3usize,
  7usize => 42usize,
  11usize => 36usize,
  6usize => 8usize,
  9usize => 33usize,
  13usize => 34usize,
  12usize => 19usize,
  1usize => 31usize,
  3usize => 7usize,
  14usize => 25usize,
  10usize => 45usize,
  5usize => 28usize,
  0usize => 41usize
};

static NESTED_GOTO_173: NestedMap = phf_map!{
  20usize => 178usize
};

static NESTED_GOTO_166: NestedMap = phf_map!{
  5usize => 28usize,
  1usize => 31usize,
  16usize => 174usize,
  6usize => 8usize,
  10usize => 45usize,
  15usize => 39usize,
  4usize => 29usize,
  12usize => 19usize,
  8usize => 3usize,
  14usize => 25usize,
  9usize => 33usize,
  3usize => 7usize,
  2usize => 32usize,
  11usize => 36usize,
  13usize => 34usize,
  7usize => 42usize,
  0usize => 41usize
};

static NESTED_GOTO_68: NestedMap = phf_map!{
  1usize => 69usize,
  0usize => 68usize,
  19usize => 125usize
};

static NESTED_GOTO_100: NestedMap = phf_map!{
  2usize => 32usize,
  9usize => 33usize,
  0usize => 41usize,
  12usize => 19usize,
  7usize => 42usize,
  4usize => 29usize,
  11usize => 36usize,
  3usize => 7usize,
  1usize => 31usize,
  15usize => 39usize,
  8usize => 3usize,
  6usize => 8usize,
  13usize => 34usize,
  10usize => 150usize,
  14usize => 25usize,
  5usize => 28usize
};

static NESTED_GOTO_15: NestedMap = phf_map!{
  0usize => 41usize,
  1usize => 31usize,
  11usize => 36usize,
  15usize => 39usize,
  16usize => 60usize,
  13usize => 34usize,
  2usize => 32usize,
  10usize => 45usize,
  5usize => 28usize,
  4usize => 29usize,
  3usize => 7usize,
  6usize => 8usize,
  12usize => 19usize,
  9usize => 33usize,
  14usize => 25usize,
  7usize => 42usize,
  8usize => 3usize
};

static NESTED_GOTO_164: NestedMap = phf_map!{
  21usize => 172usize
};

static NESTED_GOTO_171: NestedMap = phf_map!{
  1usize => 31usize,
  4usize => 29usize,
  13usize => 34usize,
  15usize => 39usize,
  9usize => 33usize,
  10usize => 45usize,
  2usize => 32usize,
  0usize => 41usize,
  3usize => 7usize,
  14usize => 25usize,
  7usize => 42usize,
  5usize => 28usize,
  11usize => 36usize,
  8usize => 3usize,
  6usize => 8usize,
  12usize => 19usize,
  16usize => 177usize
};

static NESTED_GOTO_1: NestedMap = phf_map!{
  6usize => 8usize,
  9usize => 33usize,
  10usize => 50usize,
  0usize => 41usize,
  1usize => 31usize,
  5usize => 28usize,
  14usize => 25usize,
  8usize => 3usize,
  7usize => 42usize,
  4usize => 29usize,
  13usize => 34usize,
  11usize => 36usize,
  12usize => 19usize,
  2usize => 32usize,
  15usize => 39usize,
  3usize => 7usize
};

static NESTED_GOTO_92: NestedMap = phf_map!{
  10usize => 143usize,
  12usize => 19usize,
  14usize => 25usize,
  13usize => 34usize,
  11usize => 36usize,
  6usize => 8usize,
  3usize => 7usize,
  2usize => 32usize,
  4usize => 29usize,
  1usize => 31usize,
  0usize => 41usize,
  8usize => 3usize,
  15usize => 39usize,
  5usize => 28usize,
  9usize => 33usize,
  7usize => 42usize
};

static NESTED_GOTO_89: NestedMap = phf_map!{
  12usize => 19usize,
  14usize => 25usize,
  15usize => 39usize,
  3usize => 7usize,
  0usize => 41usize,
  9usize => 33usize,
  10usize => 140usize,
  2usize => 32usize,
  1usize => 31usize,
  13usize => 34usize,
  5usize => 28usize,
  11usize => 36usize,
  6usize => 8usize,
  8usize => 3usize,
  7usize => 42usize,
  4usize => 29usize
};

static NESTED_GOTO_82: NestedMap = phf_map!{
  6usize => 8usize,
  9usize => 33usize,
  7usize => 42usize,
  10usize => 133usize,
  14usize => 25usize,
  5usize => 28usize,
  3usize => 7usize,
  11usize => 36usize,
  12usize => 19usize,
  0usize => 41usize,
  4usize => 29usize,
  1usize => 31usize,
  15usize => 39usize,
  2usize => 32usize,
  8usize => 3usize,
  13usize => 34usize
};

static NESTED_GOTO_102: NestedMap = phf_map!{
  3usize => 7usize,
  4usize => 29usize,
  1usize => 31usize,
  9usize => 33usize,
  15usize => 39usize,
  10usize => 152usize,
  0usize => 41usize,
  5usize => 28usize,
  14usize => 25usize,
  6usize => 8usize,
  11usize => 36usize,
  12usize => 19usize,
  7usize => 42usize,
  8usize => 3usize,
  2usize => 32usize,
  13usize => 34usize
};

static NESTED_GOTO_46: NestedMap = phf_map!{
  15usize => 39usize,
  10usize => 45usize,
  0usize => 41usize,
  1usize => 31usize,
  8usize => 3usize,
  9usize => 33usize,
  5usize => 28usize,
  2usize => 32usize,
  6usize => 8usize,
  12usize => 19usize,
  3usize => 7usize,
  13usize => 34usize,
  11usize => 36usize,
  14usize => 25usize,
  16usize => 114usize,
  4usize => 29usize,
  7usize => 42usize
};

static NESTED_GOTO_107: NestedMap = phf_map!{
  15usize => 39usize,
  5usize => 28usize,
  13usize => 34usize,
  0usize => 41usize,
  14usize => 25usize,
  7usize => 42usize,
  8usize => 3usize,
  1usize => 31usize,
  4usize => 29usize,
  2usize => 32usize,
  12usize => 19usize,
  11usize => 36usize,
  3usize => 7usize,
  9usize => 33usize,
  6usize => 8usize,
  10usize => 157usize
};

static NESTED_GOTO_163: NestedMap = phf_map!{
  22usize => 170usize
};

static NESTED_GOTO_16: NestedMap = phf_map!{
  0usize => 41usize,
  9usize => 33usize,
  5usize => 28usize,
  7usize => 42usize,
  4usize => 29usize,
  2usize => 32usize,
  10usize => 61usize,
  12usize => 19usize,
  3usize => 7usize,
  15usize => 39usize,
  13usize => 34usize,
  1usize => 31usize,
  14usize => 25usize,
  6usize => 8usize,
  8usize => 3usize,
  11usize => 36usize
};

static NESTED_GOTO_14: NestedMap = phf_map!{
  1usize => 31usize,
  10usize => 45usize,
  15usize => 39usize,
  6usize => 8usize,
  2usize => 32usize,
  3usize => 7usize,
  13usize => 34usize,
  11usize => 36usize,
  7usize => 42usize,
  9usize => 33usize,
  0usize => 41usize,
  14usize => 25usize,
  8usize => 3usize,
  12usize => 19usize,
  5usize => 28usize,
  16usize => 59usize,
  4usize => 29usize
};

static NESTED_GOTO_12: NestedMap = phf_map!{
  15usize => 39usize,
  16usize => 56usize,
  11usize => 36usize,
  10usize => 45usize,
  6usize => 8usize,
  4usize => 29usize,
  12usize => 19usize,
  14usize => 25usize,
  2usize => 32usize,
  8usize => 3usize,
  0usize => 41usize,
  1usize => 31usize,
  13usize => 34usize,
  7usize => 42usize,
  3usize => 7usize,
  5usize => 28usize,
  9usize => 33usize,
  18usize => 57usize
};

static NESTED_GOTO_35: NestedMap = phf_map!{
  17usize => 73usize
};

static NESTED_GOTO_86: NestedMap = phf_map!{
  6usize => 8usize,
  2usize => 32usize,
  14usize => 25usize,
  15usize => 39usize,
  7usize => 42usize,
  12usize => 19usize,
  5usize => 28usize,
  10usize => 137usize,
  4usize => 29usize,
  9usize => 33usize,
  1usize => 31usize,
  3usize => 7usize,
  0usize => 41usize,
  13usize => 34usize,
  11usize => 36usize,
  8usize => 3usize
};

static NESTED_GOTO_48: NestedMap = phf_map!{
  14usize => 25usize,
  11usize => 36usize,
  10usize => 116usize,
  5usize => 28usize,
  0usize => 41usize,
  3usize => 7usize,
  13usize => 34usize,
  2usize => 32usize,
  15usize => 39usize,
  9usize => 33usize,
  6usize => 8usize,
  7usize => 42usize,
  1usize => 31usize,
  8usize => 3usize,
  4usize => 29usize,
  12usize => 19usize
};

static NESTED_GOTO_175: NestedMap = phf_map!{
  17usize => 180usize
};

static NESTED_GOTO_112: NestedMap = phf_map!{
  5usize => 28usize,
  14usize => 25usize,
  2usize => 32usize,
  8usize => 3usize,
  10usize => 161usize,
  12usize => 19usize,
  7usize => 42usize,
  15usize => 39usize,
  3usize => 7usize,
  13usize => 34usize,
  1usize => 31usize,
  9usize => 33usize,
  4usize => 29usize,
  0usize => 41usize,
  6usize => 8usize,
  11usize => 36usize
};

static NESTED_GOTO_56: NestedMap = phf_map!{
  21usize => 121usize
};

static NESTED_GOTO_47: NestedMap = phf_map!{
  8usize => 3usize,
  3usize => 7usize,
  0usize => 41usize,
  7usize => 42usize,
  14usize => 25usize,
  16usize => 115usize,
  11usize => 36usize,
  2usize => 32usize,
  4usize => 29usize,
  10usize => 45usize,
  5usize => 28usize,
  15usize => 39usize,
  6usize => 8usize,
  1usize => 31usize,
  13usize => 34usize,
  9usize => 33usize,
  12usize => 19usize
};

static NESTED_GOTO_165: NestedMap = phf_map!{
  17usize => 173usize
};

static NESTED_GOTO_40: NestedMap = phf_map!{
  18usize => 77usize,
  7usize => 42usize,
  12usize => 19usize,
  13usize => 34usize,
  8usize => 3usize,
  11usize => 36usize,
  9usize => 33usize,
  5usize => 28usize,
  1usize => 31usize,
  10usize => 45usize,
  4usize => 29usize,
  16usize => 56usize,
  14usize => 25usize,
  15usize => 39usize,
  6usize => 8usize,
  3usize => 7usize,
  2usize => 32usize,
  0usize => 41usize
};

static NESTED_GOTO_23: NestedMap = phf_map!{
  0usize => 41usize,
  1usize => 31usize,
  6usize => 8usize,
  8usize => 3usize,
  10usize => 45usize,
  3usize => 7usize,
  4usize => 29usize,
  13usize => 34usize,
  15usize => 39usize,
  12usize => 19usize,
  5usize => 28usize,
  16usize => 66usize,
  11usize => 36usize,
  2usize => 32usize,
  9usize => 33usize,
  7usize => 42usize,
  14usize => 25usize
};

static NESTED_GOTO_106: NestedMap = phf_map!{
  11usize => 36usize,
  15usize => 39usize,
  9usize => 33usize,
  2usize => 32usize,
  3usize => 7usize,
  1usize => 31usize,
  0usize => 41usize,
  8usize => 3usize,
  7usize => 42usize,
  10usize => 156usize,
  13usize => 34usize,
  6usize => 8usize,
  4usize => 29usize,
  14usize => 25usize,
  5usize => 28usize,
  12usize => 19usize
};

static NESTED_GOTO_101: NestedMap = phf_map!{
  8usize => 3usize,
  14usize => 25usize,
  6usize => 8usize,
  11usize => 36usize,
  1usize => 31usize,
  15usize => 39usize,
  9usize => 33usize,
  4usize => 29usize,
  2usize => 32usize,
  3usize => 7usize,
  12usize => 19usize,
  5usize => 28usize,
  7usize => 42usize,
  0usize => 41usize,
  13usize => 34usize,
  10usize => 151usize
};

static NESTED_GOTO_37: NestedMap = phf_map!{
  7usize => 42usize,
  1usize => 31usize,
  14usize => 25usize,
  6usize => 8usize,
  8usize => 3usize,
  0usize => 41usize,
  11usize => 36usize,
  2usize => 32usize,
  10usize => 75usize,
  3usize => 7usize,
  13usize => 34usize,
  12usize => 19usize,
  9usize => 33usize,
  4usize => 29usize,
  5usize => 28usize,
  15usize => 39usize
};

static NESTED_GOTO_129: NestedMap = phf_map!{
  17usize => 168usize
};

static NESTED_GOTO_84: NestedMap = phf_map!{
  0usize => 41usize,
  3usize => 7usize,
  10usize => 135usize,
  14usize => 25usize,
  8usize => 3usize,
  11usize => 36usize,
  15usize => 39usize,
  7usize => 42usize,
  4usize => 29usize,
  12usize => 19usize,
  5usize => 28usize,
  9usize => 33usize,
  6usize => 8usize,
  2usize => 32usize,
  1usize => 31usize,
  13usize => 34usize
};

static NESTED_GOTO_69: NestedMap = phf_map!{
  19usize => 126usize,
  1usize => 69usize,
  0usize => 68usize
};

static NESTED_GOTO_44: NestedMap = phf_map!{
  0usize => 41usize,
  3usize => 7usize,
  2usize => 32usize,
  8usize => 3usize,
  11usize => 36usize,
  14usize => 25usize,
  4usize => 29usize,
  9usize => 33usize,
  10usize => 79usize,
  15usize => 39usize,
  6usize => 8usize,
  5usize => 28usize,
  1usize => 31usize,
  7usize => 42usize,
  12usize => 19usize,
  13usize => 34usize
};

static NESTED_GOTO_22: NestedMap = phf_map!{
  8usize => 3usize,
  9usize => 33usize,
  14usize => 25usize,
  12usize => 19usize,
  3usize => 7usize,
  2usize => 32usize,
  11usize => 36usize,
  16usize => 65usize,
  4usize => 29usize,
  0usize => 41usize,
  7usize => 42usize,
  15usize => 39usize,
  6usize => 8usize,
  5usize => 28usize,
  1usize => 31usize,
  13usize => 34usize,
  10usize => 45usize
};

static NESTED_GOTO_93: NestedMap = phf_map!{
  12usize => 19usize,
  9usize => 33usize,
  14usize => 25usize,
  0usize => 41usize,
  5usize => 28usize,
  11usize => 36usize,
  2usize => 32usize,
  10usize => 144usize,
  3usize => 7usize,
  8usize => 3usize,
  1usize => 31usize,
  7usize => 42usize,
  13usize => 34usize,
  15usize => 39usize,
  6usize => 8usize,
  4usize => 29usize
};

static NESTED_GOTO_80: NestedMap = phf_map!{
  11usize => 36usize,
  1usize => 31usize,
  2usize => 32usize,
  10usize => 131usize,
  13usize => 34usize,
  0usize => 41usize,
  12usize => 19usize,
  8usize => 3usize,
  14usize => 25usize,
  3usize => 7usize,
  4usize => 29usize,
  9usize => 33usize,
  7usize => 42usize,
  6usize => 8usize,
  5usize => 28usize,
  15usize => 39usize
};

static NESTED_GOTO_94: NestedMap = phf_map!{
  4usize => 29usize,
  0usize => 41usize,
  15usize => 39usize,
  6usize => 8usize,
  11usize => 36usize,
  10usize => 145usize,
  1usize => 31usize,
  7usize => 42usize,
  5usize => 28usize,
  12usize => 19usize,
  3usize => 7usize,
  2usize => 32usize,
  8usize => 3usize,
  14usize => 25usize,
  9usize => 33usize,
  13usize => 34usize
};

static NESTED_GOTO_120: NestedMap = phf_map!{
  16usize => 163usize,
  8usize => 3usize,
  9usize => 33usize,
  11usize => 36usize,
  14usize => 25usize,
  5usize => 28usize,
  15usize => 39usize,
  4usize => 29usize,
  10usize => 45usize,
  0usize => 41usize,
  1usize => 31usize,
  13usize => 34usize,
  12usize => 19usize,
  2usize => 32usize,
  7usize => 42usize,
  3usize => 7usize,
  6usize => 8usize
};

static NESTED_GOTO_25: NestedMap = phf_map!{
  19usize => 70usize,
  1usize => 69usize,
  0usize => 68usize
};

static NESTED_GOTO_99: NestedMap = phf_map!{
  12usize => 19usize,
  10usize => 149usize,
  6usize => 8usize,
  5usize => 28usize,
  4usize => 29usize,
  1usize => 31usize,
  8usize => 3usize,
  3usize => 7usize,
  2usize => 32usize,
  14usize => 25usize,
  9usize => 33usize,
  0usize => 41usize,
  15usize => 39usize,
  11usize => 36usize,
  13usize => 34usize,
  7usize => 42usize
};

static NESTED_GOTO_43: NestedMap = phf_map!{
  14usize => 25usize,
  15usize => 39usize,
  12usize => 19usize,
  9usize => 33usize,
  11usize => 36usize,
  13usize => 34usize,
  6usize => 8usize,
  2usize => 32usize,
  10usize => 78usize,
  1usize => 31usize,
  4usize => 29usize,
  0usize => 41usize,
  7usize => 42usize,
  3usize => 7usize,
  5usize => 28usize,
  8usize => 3usize
};

static NESTED_GOTO_103: NestedMap = phf_map!{
  3usize => 7usize,
  14usize => 25usize,
  12usize => 19usize,
  8usize => 3usize,
  7usize => 42usize,
  11usize => 36usize,
  0usize => 41usize,
  9usize => 33usize,
  1usize => 31usize,
  10usize => 153usize,
  5usize => 28usize,
  15usize => 39usize,
  4usize => 29usize,
  13usize => 34usize,
  6usize => 8usize,
  2usize => 32usize
};

static NESTED_GOTO_24: NestedMap = phf_map!{
  8usize => 3usize,
  1usize => 31usize,
  2usize => 32usize,
  6usize => 8usize,
  13usize => 34usize,
  11usize => 36usize,
  15usize => 39usize,
  4usize => 29usize,
  0usize => 41usize,
  5usize => 28usize,
  7usize => 42usize,
  12usize => 19usize,
  14usize => 25usize,
  3usize => 7usize,
  10usize => 67usize,
  9usize => 33usize
};

static NESTED_GOTO_105: NestedMap = phf_map!{
  14usize => 25usize,
  12usize => 19usize,
  11usize => 36usize,
  3usize => 7usize,
  4usize => 29usize,
  2usize => 32usize,
  6usize => 8usize,
  10usize => 155usize,
  13usize => 34usize,
  9usize => 33usize,
  15usize => 39usize,
  7usize => 42usize,
  1usize => 31usize,
  5usize => 28usize,
  0usize => 41usize,
  8usize => 3usize
};

static NESTED_GOTO_10: NestedMap = phf_map!{
  0usize => 41usize,
  8usize => 3usize,
  7usize => 42usize,
  13usize => 34usize,
  6usize => 8usize,
  2usize => 32usize,
  1usize => 31usize,
  4usize => 29usize,
  9usize => 33usize,
  12usize => 19usize,
  14usize => 25usize,
  11usize => 36usize,
  5usize => 28usize,
  3usize => 7usize,
  10usize => 54usize,
  15usize => 39usize
};

static NESTED_GOTO_52: NestedMap = phf_map!{
  15usize => 39usize,
  16usize => 118usize,
  4usize => 29usize,
  10usize => 45usize,
  3usize => 7usize,
  5usize => 28usize,
  7usize => 42usize,
  6usize => 8usize,
  8usize => 3usize,
  13usize => 34usize,
  1usize => 31usize,
  14usize => 25usize,
  2usize => 32usize,
  9usize => 33usize,
  11usize => 36usize,
  12usize => 19usize,
  0usize => 41usize
};

static NESTED_GOTO_81: NestedMap = phf_map!{
  15usize => 39usize,
  10usize => 132usize,
  9usize => 33usize,
  2usize => 32usize,
  0usize => 41usize,
  6usize => 8usize,
  14usize => 25usize,
  4usize => 29usize,
  13usize => 34usize,
  8usize => 3usize,
  1usize => 31usize,
  3usize => 7usize,
  5usize => 28usize,
  12usize => 19usize,
  11usize => 36usize,
  7usize => 42usize
};

static NESTED_GOTO_98: NestedMap = phf_map!{
  5usize => 28usize,
  12usize => 19usize,
  8usize => 3usize,
  14usize => 25usize,
  13usize => 34usize,
  1usize => 31usize,
  7usize => 42usize,
  15usize => 39usize,
  3usize => 7usize,
  0usize => 41usize,
  2usize => 32usize,
  9usize => 33usize,
  10usize => 148usize,
  6usize => 8usize,
  4usize => 29usize,
  11usize => 36usize
};

static NESTED_GOTO_73: NestedMap = phf_map!{
  20usize => 127usize
};

static NESTED_GOTO_6: NestedMap = phf_map!{
  16usize => 51usize,
  9usize => 33usize,
  14usize => 25usize,
  3usize => 7usize,
  1usize => 31usize,
  5usize => 28usize,
  12usize => 19usize,
  0usize => 41usize,
  7usize => 42usize,
  2usize => 32usize,
  13usize => 34usize,
  15usize => 39usize,
  11usize => 36usize,
  8usize => 3usize,
  4usize => 29usize,
  10usize => 45usize,
  6usize => 8usize
};

static NESTED_GOTO_0: NestedMap = phf_map!{
  12usize => 19usize,
  24usize => 26usize,
  9usize => 33usize,
  1usize => 31usize,
  15usize => 39usize,
  14usize => 25usize,
  4usize => 29usize,
  13usize => 34usize,
  16usize => 35usize,
  11usize => 36usize,
  3usize => 7usize,
  5usize => 28usize,
  6usize => 8usize,
  8usize => 3usize,
  23usize => 2usize,
  0usize => 41usize,
  7usize => 42usize,
  10usize => 45usize,
  2usize => 32usize
};

static NESTED_GOTO_110: NestedMap = phf_map!{
  13usize => 34usize,
  0usize => 41usize,
  15usize => 39usize,
  4usize => 29usize,
  7usize => 42usize,
  6usize => 8usize,
  12usize => 19usize,
  10usize => 160usize,
  8usize => 3usize,
  14usize => 25usize,
  11usize => 36usize,
  1usize => 31usize,
  5usize => 28usize,
  3usize => 7usize,
  2usize => 32usize,
  9usize => 33usize
};

static NESTED_GOTO_95: NestedMap = phf_map!{
  13usize => 34usize,
  4usize => 29usize,
  14usize => 25usize,
  11usize => 36usize,
  12usize => 19usize,
  15usize => 39usize,
  2usize => 32usize,
  10usize => 146usize,
  7usize => 42usize,
  3usize => 7usize,
  9usize => 33usize,
  6usize => 8usize,
  1usize => 31usize,
  5usize => 28usize,
  8usize => 3usize,
  0usize => 41usize
};

static NESTED_GOTO_9: NestedMap = phf_map!{
  4usize => 29usize,
  6usize => 8usize,
  12usize => 19usize,
  1usize => 31usize,
  8usize => 3usize,
  11usize => 36usize,
  3usize => 7usize,
  15usize => 39usize,
  7usize => 42usize,
  0usize => 41usize,
  5usize => 28usize,
  13usize => 34usize,
  14usize => 25usize,
  10usize => 53usize,
  9usize => 33usize,
  2usize => 32usize
};

pub static PARSERTABLES: ParserTables = ParserTables {
   nonterminals: &["Group","List","LoopBit","LoopBits","IfBase","Loop","OpPrefix","Set","Term","OpSuffix","TopOp","OpInfix","Flow","Abs","IndexableOrCallable","CallOrIndex?","Statement","EvalFlags","StatementNullList","ListsOrGroups","StatementListN","TermList","IfTail","Root","StatementList","Start"],
   rules_to_nonterminals: &[25,23,23,24,20,20,20,17,17,17,17,1,7,0,18,18,21,21,16,8,8,8,8,14,14,14,14,14,14,15,19,19,19,8,12,12,4,22,22,22,5,3,3,2,2,2,2,2,2,2,2,10,10,10,10,10,6,6,6,6,6,6,6,6,6,6,6,6,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13],
   rule_lengths: &[1,0,1,3,4,0,1,3,5,5,0,3,3,3,2,0,3,0,1,1,1,1,1,1,1,2,1,1,1,2,2,0,2,1,1,1,5,2,5,0,3,2,0,2,2,2,2,2,2,2,2,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
   table: &[phf_map! { /* 0 */
"STRING" => 60usize,
"#pm#" => 86usize,
"+-" => 26usize,
"-" => 98usize,
"step" => 92usize,
"from" => 94usize,
"?" => 32usize,
"UNARY_RECIP" => 76usize,
"?? " => 74usize,
"''" => 20usize,
"{" => 24usize,
"+" => 96usize,
"for" => 42usize,
"? " => 48usize,
"'" => 88usize,
"thru" => 30usize,
"BOOL" => 34usize,
"not" => 2usize,
"do" => 85usize,
"|" => 18usize,
"[" => 40usize,
"unless" => 12usize,
"\0" => 3usize,
"FLOAT" => 36usize,
"while" => 44usize,
"next" => 28usize,
"(" => 80usize,
"INT" => 10usize,
"not " => 54usize,
"in" => 46usize,
"ID" => 8usize,
"if" => 22usize
},
phf_map! { /* 1 */
"?? " => 74usize,
"while" => 44usize,
"[" => 40usize,
"'" => 88usize,
"from" => 94usize,
"if" => 22usize,
"step" => 92usize,
"do" => 85usize,
"thru" => 30usize,
"?" => 32usize,
"+" => 96usize,
"unless" => 12usize,
"next" => 28usize,
"(" => 80usize,
"+-" => 26usize,
"FLOAT" => 36usize,
"ID" => 8usize,
"STRING" => 60usize,
"not " => 54usize,
"BOOL" => 34usize,
"? " => 48usize,
"in" => 46usize,
"-" => 98usize,
"UNARY_RECIP" => 76usize,
"{" => 24usize,
"not" => 2usize,
"INT" => 10usize,
"#pm#" => 86usize,
"|" => 18usize,
"for" => 42usize,
"''" => 20usize
},
phf_map! { /* 2 */
"\0" => 1usize
},
phf_map! { /* 3 */
":" => 109usize,
"#pm#" => 109usize,
"or" => 109usize,
"-" => 109usize,
"nounpow" => 109usize,
"~" => 109usize,
"}" => 109usize,
")" => 109usize,
"nounand" => 109usize,
">=" => 109usize,
"nounadd" => 109usize,
"<" => 109usize,
"from" => 109usize,
"::" => 109usize,
"!!" => 109usize,
"*" => 109usize,
"**" => 109usize,
"elseif" => 109usize,
"/" => 109usize,
"and" => 109usize,
">" => 109usize,
"thru" => 109usize,
"#" => 109usize,
"STACKpmOPT" => 109usize,
"then" => 109usize,
"." => 109usize,
"else" => 109usize,
"in" => 109usize,
"^" => 109usize,
"+-" => 109usize,
"unless" => 109usize,
"while" => 109usize,
"=" => 109usize,
"]" => 109usize,
"<=" => 109usize,
"END_TOKEN" => 109usize,
"nounsub" => 109usize,
"LIST_SEP" => 109usize,
"step" => 109usize,
"for" => 109usize,
":=" => 109usize,
"::=" => 109usize,
"do" => 109usize,
"+" => 109usize,
"blankmult" => 109usize,
"noundiv" => 109usize,
"^^" => 109usize,
"\0" => 109usize,
"!" => 109usize,
"nouneq" => 109usize,
"nounor" => 109usize,
"|" => 109usize,
"next" => 109usize
},
phf_map! { /* 4 */
"from" => 49usize,
"nounpow" => 49usize,
"(" => 49usize,
"for" => 49usize,
">" => 49usize,
"END_TOKEN" => 49usize,
"^" => 49usize,
"~" => 49usize,
"!" => 49usize,
"#" => 49usize,
"::" => 49usize,
"^^" => 49usize,
"thru" => 49usize,
"+-" => 49usize,
"!!" => 49usize,
"nounadd" => 49usize,
"in" => 49usize,
"and" => 49usize,
"::=" => 49usize,
"nouneq" => 49usize,
")" => 49usize,
"noundiv" => 49usize,
"blankmult" => 49usize,
"STACKpmOPT" => 49usize,
"=" => 49usize,
"/" => 49usize,
"**" => 49usize,
"|" => 49usize,
"." => 49usize,
"next" => 49usize,
"<" => 49usize,
":=" => 49usize,
"-" => 49usize,
"nounand" => 49usize,
"do" => 49usize,
"step" => 49usize,
"unless" => 49usize,
"while" => 49usize,
"#pm#" => 49usize,
"or" => 49usize,
"]" => 49usize,
"else" => 49usize,
"nounor" => 49usize,
":" => 49usize,
"<=" => 49usize,
"+" => 49usize,
">=" => 49usize,
"*" => 49usize,
"elseif" => 49usize,
"nounsub" => 49usize,
"then" => 49usize,
"\0" => 49usize,
"}" => 49usize,
"LIST_SEP" => 49usize,
"[" => 49usize
},
phf_map! { /* 5 */
"blankmult" => 41usize,
"noundiv" => 41usize,
"::=" => 41usize,
"nounor" => 41usize,
":" => 41usize,
"END_TOKEN" => 41usize,
"or" => 41usize,
"while" => 41usize,
"else" => 41usize,
">=" => 41usize,
"elseif" => 41usize,
"^" => 41usize,
"\0" => 41usize,
"#pm#" => 41usize,
"step" => 41usize,
"+-" => 41usize,
"<" => 41usize,
"LIST_SEP" => 41usize,
"do" => 41usize,
"-" => 41usize,
"." => 41usize,
"then" => 41usize,
"nouneq" => 41usize,
"/" => 41usize,
"#" => 41usize,
"<=" => 41usize,
"|" => 41usize,
"and" => 41usize,
"**" => 41usize,
"nounpow" => 41usize,
"^^" => 41usize,
"::" => 41usize,
"nounand" => 41usize,
"thru" => 41usize,
"nounadd" => 41usize,
"*" => 41usize,
"!" => 41usize,
")" => 41usize,
"}" => 41usize,
":=" => 41usize,
"next" => 41usize,
">" => 41usize,
"=" => 41usize,
"for" => 41usize,
"+" => 41usize,
"from" => 41usize,
"nounsub" => 41usize,
"unless" => 41usize,
"]" => 41usize,
"!!" => 41usize,
"~" => 41usize,
"in" => 41usize,
"STACKpmOPT" => 41usize
},
phf_map! { /* 6 */
"in" => 46usize,
"? " => 48usize,
"do" => 85usize,
"#pm#" => 86usize,
"ID" => 8usize,
"UNARY_RECIP" => 76usize,
"while" => 44usize,
"[" => 40usize,
"from" => 94usize,
"thru" => 30usize,
"''" => 20usize,
"BOOL" => 34usize,
"?? " => 74usize,
"for" => 42usize,
"not" => 2usize,
"'" => 88usize,
"|" => 18usize,
"not " => 54usize,
"next" => 28usize,
"-" => 98usize,
"?" => 32usize,
"unless" => 12usize,
"FLOAT" => 36usize,
"+-" => 26usize,
"{" => 24usize,
"if" => 22usize,
"INT" => 10usize,
"+" => 96usize,
"(" => 80usize,
"STRING" => 60usize,
"step" => 92usize
},
phf_map! { /* 7 */
"do" => 104usize
},
phf_map! { /* 8 */
"STACKpmOPT" => 107usize,
"=" => 107usize,
"noundiv" => 107usize,
"!" => 107usize,
"/" => 107usize,
"**" => 107usize,
"^^" => 107usize,
"\0" => 107usize,
"::" => 107usize,
"." => 107usize,
"LIST_SEP" => 107usize,
":" => 107usize,
"nounor" => 107usize,
"thru" => 107usize,
"and" => 107usize,
"+-" => 107usize,
"#pm#" => 107usize,
"]" => 107usize,
")" => 107usize,
"<" => 107usize,
"then" => 107usize,
"for" => 107usize,
"nounadd" => 107usize,
"from" => 107usize,
"nouneq" => 107usize,
">" => 107usize,
":=" => 107usize,
"::=" => 107usize,
"END_TOKEN" => 107usize,
"blankmult" => 107usize,
"unless" => 107usize,
"|" => 107usize,
"or" => 107usize,
"~" => 107usize,
"nounand" => 107usize,
"#" => 107usize,
"else" => 107usize,
"-" => 107usize,
"nounsub" => 107usize,
"!!" => 107usize,
"nounpow" => 107usize,
"in" => 107usize,
"elseif" => 107usize,
"next" => 107usize,
"}" => 107usize,
"<=" => 107usize,
"while" => 107usize,
"*" => 107usize,
">=" => 107usize,
"do" => 107usize,
"step" => 107usize,
"+" => 107usize,
"^" => 107usize
},
phf_map! { /* 9 */
"'" => 88usize,
"[" => 40usize,
"+" => 96usize,
"(" => 80usize,
"-" => 98usize,
"not" => 2usize,
"for" => 42usize,
"''" => 20usize,
"unless" => 12usize,
"?? " => 74usize,
"if" => 22usize,
"? " => 48usize,
"next" => 28usize,
"?" => 32usize,
"|" => 18usize,
"FLOAT" => 36usize,
"do" => 85usize,
"BOOL" => 34usize,
"STRING" => 60usize,
"+-" => 26usize,
"ID" => 8usize,
"INT" => 10usize,
"{" => 24usize,
"while" => 44usize,
"#pm#" => 86usize,
"thru" => 30usize,
"step" => 92usize,
"in" => 46usize,
"from" => 94usize,
"UNARY_RECIP" => 76usize,
"not " => 54usize
},
phf_map! { /* 10 */
"not " => 54usize,
"[" => 40usize,
"+" => 96usize,
"+-" => 26usize,
"thru" => 30usize,
"step" => 92usize,
"?" => 32usize,
"?? " => 74usize,
"unless" => 12usize,
"for" => 42usize,
"'" => 88usize,
"{" => 24usize,
"not" => 2usize,
"UNARY_RECIP" => 76usize,
"|" => 18usize,
"BOOL" => 34usize,
"? " => 48usize,
"FLOAT" => 36usize,
"(" => 80usize,
"''" => 20usize,
"#pm#" => 86usize,
"next" => 28usize,
"-" => 98usize,
"while" => 44usize,
"if" => 22usize,
"ID" => 8usize,
"from" => 94usize,
"do" => 85usize,
"STRING" => 60usize,
"in" => 46usize,
"INT" => 10usize
},
phf_map! { /* 11 */
"''" => 20usize,
"not" => 2usize,
"not " => 54usize,
"? " => 48usize,
"INT" => 10usize,
"FLOAT" => 36usize,
"+-" => 26usize,
"(" => 80usize,
"BOOL" => 34usize,
"while" => 44usize,
"from" => 94usize,
"|" => 18usize,
"#pm#" => 86usize,
"unless" => 12usize,
"do" => 85usize,
"?" => 32usize,
"thru" => 30usize,
"UNARY_RECIP" => 76usize,
"?? " => 74usize,
"for" => 42usize,
"ID" => 8usize,
"STRING" => 60usize,
"step" => 92usize,
"{" => 24usize,
"[" => 40usize,
"next" => 28usize,
"+" => 96usize,
"in" => 46usize,
"'" => 88usize,
"-" => 98usize,
"if" => 22usize
},
phf_map! { /* 12 */
"|" => 18usize,
"FLOAT" => 36usize,
"not" => 2usize,
"while" => 44usize,
"'" => 88usize,
"UNARY_RECIP" => 76usize,
"{" => 24usize,
"-" => 98usize,
"? " => 48usize,
"STRING" => 60usize,
"in" => 46usize,
"thru" => 30usize,
"INT" => 10usize,
"do" => 85usize,
"''" => 20usize,
"+-" => 26usize,
"from" => 94usize,
"]" => 31usize,
"not " => 54usize,
"BOOL" => 34usize,
"next" => 28usize,
"#pm#" => 86usize,
")" => 31usize,
"unless" => 12usize,
"+" => 96usize,
"for" => 42usize,
"if" => 22usize,
"(" => 80usize,
"step" => 92usize,
"}" => 31usize,
"?? " => 74usize,
"ID" => 8usize,
"?" => 32usize,
"[" => 40usize
},
phf_map! { /* 13 */
"#pm#" => 86usize,
"BOOL" => 34usize,
"not" => 2usize,
"unless" => 12usize,
"{" => 24usize,
"in" => 46usize,
"[" => 40usize,
"+-" => 26usize,
"?? " => 74usize,
"|" => 18usize,
"FLOAT" => 36usize,
"not " => 54usize,
"'" => 88usize,
"? " => 48usize,
"while" => 44usize,
"UNARY_RECIP" => 76usize,
"?" => 32usize,
"ID" => 8usize,
"INT" => 10usize,
"''" => 20usize,
"-" => 98usize,
"do" => 85usize,
"for" => 42usize,
"from" => 94usize,
"(" => 80usize,
"step" => 92usize,
"next" => 28usize,
"+" => 96usize,
"STRING" => 60usize,
"if" => 22usize,
"thru" => 30usize
},
phf_map! { /* 14 */
"?" => 32usize,
"?? " => 74usize,
"STRING" => 60usize,
"FLOAT" => 36usize,
"UNARY_RECIP" => 76usize,
"thru" => 30usize,
"for" => 42usize,
"ID" => 8usize,
"-" => 98usize,
"not" => 2usize,
"step" => 92usize,
"+-" => 26usize,
"''" => 20usize,
"do" => 85usize,
"next" => 28usize,
"while" => 44usize,
"{" => 24usize,
"? " => 48usize,
"(" => 80usize,
"unless" => 12usize,
"+" => 96usize,
"not " => 54usize,
"[" => 40usize,
"if" => 22usize,
"in" => 46usize,
"from" => 94usize,
"BOOL" => 34usize,
"'" => 88usize,
"INT" => 10usize,
"|" => 18usize,
"#pm#" => 86usize
},
phf_map! { /* 15 */
"''" => 20usize,
"(" => 80usize,
"'" => 88usize,
"INT" => 10usize,
"+" => 96usize,
"#pm#" => 86usize,
"not " => 54usize,
"|" => 18usize,
"? " => 48usize,
"+-" => 26usize,
"do" => 85usize,
"STRING" => 60usize,
"?" => 32usize,
"ID" => 8usize,
"UNARY_RECIP" => 76usize,
"{" => 24usize,
"[" => 40usize,
"step" => 92usize,
"if" => 22usize,
"-" => 98usize,
"next" => 28usize,
"thru" => 30usize,
"in" => 46usize,
"not" => 2usize,
"BOOL" => 34usize,
"while" => 44usize,
"from" => 94usize,
"FLOAT" => 36usize,
"?? " => 74usize,
"unless" => 12usize,
"for" => 42usize
},
phf_map! { /* 16 */
"LISP_ID" => 124usize,
"BOOL" => 34usize,
"in" => 46usize,
"|" => 18usize,
"next" => 28usize,
"from" => 94usize,
"?? " => 74usize,
"? " => 48usize,
"do" => 85usize,
"for" => 42usize,
"ID" => 8usize,
"UNARY_RECIP" => 76usize,
"+-" => 26usize,
"?" => 32usize,
"-" => 98usize,
"[" => 40usize,
"not" => 2usize,
"#pm#" => 86usize,
"FLOAT" => 36usize,
"{" => 24usize,
"step" => 92usize,
"''" => 20usize,
"if" => 22usize,
"unless" => 12usize,
"while" => 44usize,
"INT" => 10usize,
"(" => 80usize,
"not " => 54usize,
"STRING" => 60usize,
"'" => 88usize,
"thru" => 30usize,
"+" => 96usize
},
phf_map! { /* 17 */
"nounand" => 39usize,
"~" => 39usize,
"elseif" => 39usize,
"STACKpmOPT" => 39usize,
"and" => 39usize,
"from" => 39usize,
":=" => 39usize,
"^" => 39usize,
"!!" => 39usize,
"END_TOKEN" => 39usize,
"." => 39usize,
"/" => 39usize,
"nounor" => 39usize,
"blankmult" => 39usize,
"+-" => 39usize,
"step" => 39usize,
"=" => 39usize,
")" => 39usize,
">" => 39usize,
"nounsub" => 39usize,
"#" => 39usize,
">=" => 39usize,
"nouneq" => 39usize,
"]" => 39usize,
"then" => 39usize,
"thru" => 39usize,
"!" => 39usize,
"LIST_SEP" => 39usize,
"+" => 39usize,
"*" => 39usize,
"::" => 39usize,
"<" => 39usize,
"while" => 39usize,
"next" => 39usize,
"in" => 39usize,
"-" => 39usize,
"else" => 39usize,
"}" => 39usize,
"::=" => 39usize,
"**" => 39usize,
"^^" => 39usize,
"do" => 39usize,
"nounadd" => 39usize,
"or" => 39usize,
"unless" => 39usize,
"#pm#" => 39usize,
"nounpow" => 39usize,
"<=" => 39usize,
"noundiv" => 39usize,
":" => 39usize,
"for" => 39usize,
"|" => 39usize,
"\0" => 39usize
},
phf_map! { /* 18 */
"!!" => 43usize,
"/" => 43usize,
"}" => 43usize,
"else" => 43usize,
"^" => 43usize,
"|" => 43usize,
"~" => 43usize,
"<=" => 43usize,
">=" => 43usize,
"in" => 43usize,
"<" => 43usize,
"*" => 43usize,
":" => 43usize,
"for" => 43usize,
"while" => 43usize,
"blankmult" => 43usize,
"and" => 43usize,
"#" => 43usize,
"elseif" => 43usize,
"nounpow" => 43usize,
"+" => 43usize,
">" => 43usize,
"unless" => 43usize,
"::" => 43usize,
"::=" => 43usize,
"thru" => 43usize,
"nounadd" => 43usize,
"then" => 43usize,
"." => 43usize,
"next" => 43usize,
"noundiv" => 43usize,
"nounsub" => 43usize,
"\0" => 43usize,
"do" => 43usize,
"step" => 43usize,
"END_TOKEN" => 43usize,
"-" => 43usize,
"**" => 43usize,
"!" => 43usize,
"^^" => 43usize,
"+-" => 43usize,
"or" => 43usize,
"#pm#" => 43usize,
"nounand" => 43usize,
":=" => 43usize,
"=" => 43usize,
"nounor" => 43usize,
"]" => 43usize,
")" => 43usize,
"STACKpmOPT" => 43usize,
"nouneq" => 43usize,
"LIST_SEP" => 43usize,
"from" => 43usize
},
phf_map! { /* 19 */
":" => 67usize,
"or" => 67usize,
"elseif" => 67usize,
"**" => 67usize,
"+-" => 67usize,
">" => 67usize,
"LIST_SEP" => 67usize,
"nounadd" => 67usize,
"nounor" => 67usize,
"nounsub" => 67usize,
"then" => 67usize,
"else" => 67usize,
"for" => 67usize,
"nounand" => 67usize,
"#" => 67usize,
"do" => 67usize,
"::" => 67usize,
"while" => 67usize,
"blankmult" => 67usize,
"<" => 67usize,
"nouneq" => 67usize,
":=" => 67usize,
"!" => 67usize,
"noundiv" => 67usize,
"step" => 67usize,
"+" => 67usize,
"|" => 67usize,
"thru" => 67usize,
"next" => 67usize,
"END_TOKEN" => 67usize,
"/" => 67usize,
"!!" => 67usize,
"." => 67usize,
")" => 67usize,
"<=" => 67usize,
"\0" => 67usize,
"and" => 67usize,
"^^" => 67usize,
"#pm#" => 67usize,
"=" => 67usize,
"}" => 67usize,
"::=" => 67usize,
"from" => 67usize,
"^" => 67usize,
"*" => 67usize,
"]" => 67usize,
"unless" => 67usize,
"-" => 67usize,
"~" => 67usize,
">=" => 67usize,
"nounpow" => 67usize,
"STACKpmOPT" => 67usize,
"in" => 67usize
},
phf_map! { /* 20 */
"?" => 32usize,
")" => 31usize,
"FLOAT" => 36usize,
"{" => 24usize,
"step" => 92usize,
"+" => 96usize,
"]" => 31usize,
"not" => 2usize,
"next" => 28usize,
"''" => 20usize,
"if" => 22usize,
"for" => 42usize,
"[" => 40usize,
"|" => 18usize,
"while" => 44usize,
"-" => 98usize,
"?? " => 74usize,
"in" => 46usize,
"from" => 94usize,
"(" => 80usize,
"+-" => 26usize,
"? " => 48usize,
"ID" => 8usize,
"INT" => 10usize,
"do" => 85usize,
"not " => 54usize,
"UNARY_RECIP" => 76usize,
"'" => 88usize,
"unless" => 12usize,
"thru" => 30usize,
"BOOL" => 34usize,
"STRING" => 60usize,
"}" => 31usize,
"#pm#" => 86usize
},
phf_map! { /* 21 */
"?? " => 74usize,
"'" => 88usize,
"(" => 80usize,
"do" => 85usize,
"from" => 94usize,
"next" => 28usize,
"for" => 42usize,
"+" => 96usize,
"#pm#" => 86usize,
"unless" => 12usize,
"|" => 18usize,
"UNARY_RECIP" => 76usize,
"?" => 32usize,
"ID" => 8usize,
"if" => 22usize,
"not " => 54usize,
"+-" => 26usize,
"{" => 24usize,
"? " => 48usize,
"''" => 20usize,
"step" => 92usize,
"thru" => 30usize,
"STRING" => 60usize,
"in" => 46usize,
"BOOL" => 34usize,
"INT" => 10usize,
"-" => 98usize,
"FLOAT" => 36usize,
"[" => 40usize,
"not" => 2usize,
"while" => 44usize
},
phf_map! { /* 22 */
"{" => 24usize,
"not" => 2usize,
"''" => 20usize,
"[" => 40usize,
"-" => 98usize,
"+" => 96usize,
"FLOAT" => 36usize,
"next" => 28usize,
"STRING" => 60usize,
"in" => 46usize,
"|" => 18usize,
"step" => 92usize,
"(" => 80usize,
"UNARY_RECIP" => 76usize,
"thru" => 30usize,
"? " => 48usize,
"'" => 88usize,
"unless" => 12usize,
"#pm#" => 86usize,
"BOOL" => 34usize,
"not " => 54usize,
"while" => 44usize,
"?? " => 74usize,
"for" => 42usize,
"INT" => 10usize,
"?" => 32usize,
"from" => 94usize,
"if" => 22usize,
"+-" => 26usize,
"ID" => 8usize,
"do" => 85usize
},
phf_map! { /* 23 */
"+" => 96usize,
"if" => 22usize,
"? " => 48usize,
"for" => 42usize,
"next" => 28usize,
"unless" => 12usize,
"?" => 32usize,
"in" => 46usize,
"''" => 20usize,
"INT" => 10usize,
"STRING" => 60usize,
"thru" => 30usize,
"step" => 92usize,
"while" => 44usize,
"-" => 98usize,
"UNARY_RECIP" => 76usize,
"'" => 88usize,
"|" => 18usize,
"ID" => 8usize,
"do" => 85usize,
"from" => 94usize,
"#pm#" => 86usize,
"not" => 2usize,
"(" => 80usize,
"{" => 24usize,
"+-" => 26usize,
"not " => 54usize,
"FLOAT" => 36usize,
"[" => 40usize,
"?? " => 74usize,
"BOOL" => 34usize
},
phf_map! { /* 24 */
"in" => 46usize,
"from" => 94usize,
"thru" => 30usize,
"FLOAT" => 36usize,
"? " => 48usize,
"[" => 40usize,
"if" => 22usize,
"?? " => 74usize,
"#pm#" => 86usize,
"-" => 98usize,
"UNARY_RECIP" => 76usize,
"''" => 20usize,
"+" => 96usize,
"step" => 92usize,
"ID" => 8usize,
"INT" => 10usize,
"{" => 24usize,
"STRING" => 60usize,
"?" => 32usize,
"not" => 2usize,
"+-" => 26usize,
"while" => 44usize,
"do" => 85usize,
"unless" => 12usize,
"BOOL" => 34usize,
"(" => 80usize,
"not " => 54usize,
"next" => 28usize,
"for" => 42usize,
"|" => 18usize,
"'" => 88usize
},
phf_map! { /* 25 */
"/" => 63usize,
"^^" => 63usize,
"END_TOKEN" => 63usize,
"step" => 63usize,
"LIST_SEP" => 63usize,
"STACKpmOPT" => 63usize,
"~" => 63usize,
">" => 63usize,
"noundiv" => 63usize,
"!!" => 63usize,
"|" => 63usize,
"from" => 63usize,
"nounand" => 63usize,
"<" => 63usize,
"-" => 63usize,
"nouneq" => 63usize,
"elseif" => 63usize,
")" => 63usize,
"::=" => 63usize,
"^" => 63usize,
"unless" => 63usize,
"in" => 63usize,
"(" => 80usize,
"blankmult" => 63usize,
"::" => 63usize,
"]" => 63usize,
"while" => 63usize,
"do" => 63usize,
"!" => 63usize,
"then" => 63usize,
"=" => 63usize,
"#" => 63usize,
":" => 63usize,
"#pm#" => 63usize,
"**" => 63usize,
"nounor" => 63usize,
"<=" => 63usize,
"+" => 63usize,
"nounsub" => 63usize,
"}" => 63usize,
"." => 63usize,
">=" => 63usize,
"\0" => 63usize,
"else" => 63usize,
"and" => 63usize,
"next" => 63usize,
"+-" => 63usize,
"nounadd" => 63usize,
":=" => 63usize,
"thru" => 63usize,
"[" => 40usize,
"or" => 63usize,
"*" => 63usize,
"nounpow" => 63usize,
"for" => 63usize
},
phf_map! { /* 26 */
"\0" => 5usize
},
phf_map! { /* 27 */
"from" => 94usize,
"STRING" => 60usize,
"ID" => 8usize,
"not " => 54usize,
"?? " => 74usize,
"{" => 24usize,
"BOOL" => 34usize,
"-" => 98usize,
"#pm#" => 86usize,
"do" => 85usize,
"step" => 92usize,
"(" => 80usize,
"for" => 42usize,
"in" => 46usize,
"thru" => 30usize,
"unless" => 12usize,
"+" => 96usize,
"[" => 40usize,
"UNARY_RECIP" => 76usize,
"+-" => 26usize,
"not" => 2usize,
"next" => 28usize,
"|" => 18usize,
"''" => 20usize,
"'" => 88usize,
"? " => 48usize,
"if" => 22usize,
"while" => 44usize,
"FLOAT" => 36usize,
"?" => 32usize,
"INT" => 10usize
},
phf_map! { /* 28 */
"." => 71usize,
")" => 71usize,
"nounpow" => 71usize,
"#pm#" => 71usize,
"*" => 71usize,
"-" => 71usize,
"nounadd" => 71usize,
"nounand" => 71usize,
"!!" => 71usize,
"thru" => 71usize,
"do" => 71usize,
"+-" => 71usize,
"LIST_SEP" => 71usize,
"<=" => 71usize,
"STACKpmOPT" => 71usize,
"then" => 71usize,
"::" => 71usize,
"nouneq" => 71usize,
"noundiv" => 71usize,
"step" => 71usize,
"for" => 71usize,
">" => 71usize,
"<" => 71usize,
"=" => 71usize,
"next" => 71usize,
":=" => 71usize,
"or" => 71usize,
"::=" => 71usize,
"~" => 71usize,
"**" => 71usize,
"|" => 71usize,
">=" => 71usize,
"!" => 71usize,
"else" => 71usize,
"\0" => 71usize,
"nounsub" => 71usize,
"#" => 71usize,
"in" => 71usize,
"]" => 71usize,
"from" => 71usize,
"and" => 71usize,
"blankmult" => 71usize,
"}" => 71usize,
"^" => 71usize,
"^^" => 71usize,
"nounor" => 71usize,
"+" => 71usize,
"elseif" => 71usize,
":" => 71usize,
"/" => 71usize,
"unless" => 71usize,
"END_TOKEN" => 71usize,
"while" => 71usize
},
phf_map! { /* 29 */
"STACKpmOPT" => 69usize,
"nouneq" => 69usize,
"nounadd" => 69usize,
"=" => 69usize,
"\0" => 69usize,
"|" => 69usize,
":=" => 69usize,
"^^" => 69usize,
"elseif" => 69usize,
">=" => 69usize,
"nounand" => 69usize,
"+" => 69usize,
"::=" => 69usize,
"+-" => 69usize,
"while" => 69usize,
"END_TOKEN" => 69usize,
"and" => 69usize,
"next" => 69usize,
"!!" => 69usize,
"step" => 69usize,
"blankmult" => 69usize,
":" => 69usize,
"for" => 69usize,
"nounpow" => 69usize,
"." => 69usize,
"**" => 69usize,
"then" => 69usize,
"!" => 69usize,
"or" => 69usize,
"<=" => 69usize,
"*" => 69usize,
"#" => 69usize,
"]" => 69usize,
"^" => 69usize,
"else" => 69usize,
"#pm#" => 69usize,
"-" => 69usize,
")" => 69usize,
"from" => 69usize,
"unless" => 69usize,
"/" => 69usize,
"nounor" => 69usize,
"::" => 69usize,
"LIST_SEP" => 69usize,
"~" => 69usize,
"}" => 69usize,
"do" => 69usize,
"nounsub" => 69usize,
"noundiv" => 69usize,
">" => 69usize,
"in" => 69usize,
"<" => 69usize,
"thru" => 69usize
},
phf_map! { /* 30 */
"or" => 47usize,
"LIST_SEP" => 47usize,
"STACKpmOPT" => 47usize,
"[" => 47usize,
">=" => 47usize,
"elseif" => 47usize,
"+-" => 47usize,
"/" => 47usize,
"<" => 47usize,
"<=" => 47usize,
":" => 47usize,
"from" => 47usize,
"!!" => 47usize,
"+" => 47usize,
"while" => 47usize,
"!" => 47usize,
"." => 47usize,
"and" => 47usize,
"~" => 47usize,
"nouneq" => 47usize,
"|" => 47usize,
"nounor" => 47usize,
"::=" => 47usize,
"for" => 47usize,
":=" => 47usize,
"step" => 47usize,
"*" => 47usize,
"thru" => 47usize,
"=" => 47usize,
"::" => 47usize,
"nounsub" => 47usize,
"-" => 47usize,
"unless" => 47usize,
"in" => 47usize,
"]" => 47usize,
"nounand" => 47usize,
"END_TOKEN" => 47usize,
"nounadd" => 47usize,
"next" => 47usize,
"(" => 47usize,
"\0" => 47usize,
"then" => 47usize,
"**" => 47usize,
"}" => 47usize,
"nounpow" => 47usize,
">" => 47usize,
"noundiv" => 47usize,
"do" => 47usize,
"^^" => 47usize,
"#pm#" => 47usize,
"#" => 47usize,
"^" => 47usize,
"else" => 47usize,
")" => 47usize,
"blankmult" => 47usize
},
phf_map! { /* 31 */
"<" => 53usize,
"::" => 53usize,
"." => 53usize,
"(" => 53usize,
"nounsub" => 53usize,
"elseif" => 53usize,
"or" => 53usize,
"and" => 53usize,
"in" => 53usize,
"nounor" => 53usize,
"^" => 53usize,
"/" => 53usize,
"nounadd" => 53usize,
">" => 53usize,
"|" => 53usize,
"do" => 53usize,
"blankmult" => 53usize,
"END_TOKEN" => 53usize,
"!" => 53usize,
"!!" => 53usize,
"nounpow" => 53usize,
"for" => 53usize,
"STACKpmOPT" => 53usize,
"*" => 53usize,
"unless" => 53usize,
"+" => 53usize,
"LIST_SEP" => 53usize,
"=" => 53usize,
"while" => 53usize,
"from" => 53usize,
"thru" => 53usize,
"\0" => 53usize,
"~" => 53usize,
":" => 53usize,
"noundiv" => 53usize,
"[" => 53usize,
"}" => 53usize,
"<=" => 53usize,
"#pm#" => 53usize,
"else" => 53usize,
"**" => 53usize,
"]" => 53usize,
"then" => 53usize,
"+-" => 53usize,
"nouneq" => 53usize,
"::=" => 53usize,
">=" => 53usize,
"#" => 53usize,
"^^" => 53usize,
"step" => 53usize,
")" => 53usize,
"next" => 53usize,
"-" => 53usize,
":=" => 53usize,
"nounand" => 53usize
},
phf_map! { /* 32 */
"next" => 28usize,
"for" => 42usize,
"from" => 94usize,
"while" => 44usize,
"in" => 46usize,
"do" => 85usize,
"unless" => 12usize,
"thru" => 30usize,
"step" => 92usize
},
phf_map! { /* 33 */
"\0" => 105usize,
"thru" => 105usize,
")" => 105usize,
"elseif" => 105usize,
"^^" => 105usize,
"nounadd" => 105usize,
"#" => 105usize,
"!!" => 105usize,
"=" => 105usize,
">" => 105usize,
"<" => 105usize,
"do" => 105usize,
"and" => 105usize,
"~" => 105usize,
"*" => 105usize,
"while" => 105usize,
"}" => 105usize,
"else" => 105usize,
"from" => 105usize,
"nounpow" => 105usize,
"noundiv" => 105usize,
"for" => 105usize,
"next" => 105usize,
"::" => 105usize,
"/" => 105usize,
"]" => 105usize,
":=" => 105usize,
"nounsub" => 105usize,
"#pm#" => 105usize,
"nounor" => 105usize,
"+-" => 105usize,
"or" => 105usize,
"::=" => 105usize,
"." => 105usize,
"in" => 105usize,
"**" => 105usize,
"END_TOKEN" => 105usize,
"step" => 105usize,
"STACKpmOPT" => 105usize,
"|" => 105usize,
"<=" => 105usize,
":" => 105usize,
"blankmult" => 105usize,
">=" => 105usize,
"!" => 105usize,
"^" => 105usize,
"unless" => 105usize,
"-" => 105usize,
"LIST_SEP" => 105usize,
"+" => 105usize,
"nounand" => 105usize,
"nouneq" => 105usize,
"then" => 105usize
},
phf_map! { /* 34 */
"while" => 111usize,
"|" => 111usize,
"::" => 111usize,
"STACKpmOPT" => 111usize,
"+" => 111usize,
"or" => 111usize,
"nounor" => 111usize,
"blankmult" => 111usize,
")" => 111usize,
"#" => 111usize,
"<=" => 111usize,
">" => 111usize,
"::=" => 111usize,
"unless" => 111usize,
"nouneq" => 111usize,
"nounadd" => 111usize,
"=" => 111usize,
"+-" => 111usize,
"nounand" => 111usize,
"in" => 111usize,
"~" => 111usize,
"END_TOKEN" => 111usize,
"LIST_SEP" => 111usize,
"and" => 111usize,
":=" => 111usize,
"else" => 111usize,
"^" => 111usize,
"noundiv" => 111usize,
"<" => 111usize,
"do" => 111usize,
":" => 111usize,
"^^" => 111usize,
"nounsub" => 111usize,
"}" => 111usize,
"elseif" => 111usize,
"nounpow" => 111usize,
"\0" => 111usize,
"step" => 111usize,
"from" => 111usize,
"-" => 111usize,
"*" => 111usize,
">=" => 111usize,
"!" => 111usize,
"**" => 111usize,
"next" => 111usize,
"#pm#" => 111usize,
"for" => 111usize,
"!!" => 111usize,
"thru" => 111usize,
"/" => 111usize,
"then" => 111usize,
"]" => 111usize,
"." => 111usize
},
phf_map! { /* 35 */
"END_TOKEN" => 21usize,
"\0" => 21usize,
"LIST_SEP" => 148usize
},
phf_map! { /* 36 */
">=" => 103usize,
"!!" => 103usize,
"nouneq" => 103usize,
"step" => 103usize,
"|" => 103usize,
"!" => 103usize,
"^" => 103usize,
"#pm#" => 103usize,
"nounsub" => 103usize,
"blankmult" => 103usize,
"else" => 103usize,
"from" => 103usize,
"^^" => 103usize,
"while" => 103usize,
"<" => 103usize,
"elseif" => 103usize,
"next" => 103usize,
"<=" => 103usize,
"}" => 103usize,
"then" => 103usize,
"nounpow" => 103usize,
"or" => 103usize,
"+-" => 103usize,
")" => 103usize,
"END_TOKEN" => 103usize,
"nounand" => 103usize,
"+" => 103usize,
"noundiv" => 103usize,
"unless" => 103usize,
"::" => 103usize,
"\0" => 103usize,
"nounadd" => 103usize,
"-" => 103usize,
"nounor" => 103usize,
"#" => 103usize,
">" => 103usize,
"~" => 103usize,
"do" => 103usize,
"LIST_SEP" => 103usize,
"thru" => 103usize,
"]" => 103usize,
"for" => 103usize,
"/" => 103usize,
"STACKpmOPT" => 103usize,
"=" => 103usize,
"**" => 103usize,
"::=" => 103usize,
":" => 103usize,
"and" => 103usize,
"in" => 103usize,
"*" => 103usize,
"." => 103usize,
":=" => 103usize
},
phf_map! { /* 37 */
"do" => 85usize,
"not " => 54usize,
"?" => 32usize,
"{" => 24usize,
"'" => 88usize,
"in" => 46usize,
"while" => 44usize,
"[" => 40usize,
"UNARY_RECIP" => 76usize,
"?? " => 74usize,
"BOOL" => 34usize,
"FLOAT" => 36usize,
"ID" => 8usize,
"thru" => 30usize,
"? " => 48usize,
"next" => 28usize,
"step" => 92usize,
"-" => 98usize,
"INT" => 10usize,
"(" => 80usize,
"if" => 22usize,
"unless" => 12usize,
"STRING" => 60usize,
"not" => 2usize,
"from" => 94usize,
"#pm#" => 86usize,
"+" => 96usize,
"|" => 18usize,
"''" => 20usize,
"+-" => 26usize,
"for" => 42usize
},
phf_map! { /* 38 */
"?? " => 74usize,
"not " => 54usize,
"STRING" => 60usize,
"+-" => 26usize,
"if" => 22usize,
"UNARY_RECIP" => 76usize,
"|" => 18usize,
"+" => 96usize,
"while" => 44usize,
"unless" => 12usize,
"FLOAT" => 36usize,
"ID" => 8usize,
"[" => 40usize,
"step" => 92usize,
"BOOL" => 34usize,
"?" => 32usize,
"do" => 85usize,
"#pm#" => 86usize,
"from" => 94usize,
"{" => 24usize,
"INT" => 10usize,
"in" => 46usize,
"thru" => 30usize,
"''" => 20usize,
"(" => 80usize,
"? " => 48usize,
"for" => 42usize,
"next" => 28usize,
"-" => 98usize,
"'" => 88usize,
"not" => 2usize
},
phf_map! { /* 39 */
"STACKpmOPT" => 45usize,
"." => 45usize,
"nounand" => 45usize,
"next" => 45usize,
"noundiv" => 45usize,
"#" => 45usize,
"^" => 45usize,
"::" => 45usize,
"}" => 45usize,
":" => 45usize,
"for" => 45usize,
"step" => 45usize,
"**" => 45usize,
"or" => 45usize,
"<=" => 45usize,
"=" => 45usize,
"in" => 45usize,
")" => 45usize,
"do" => 45usize,
"then" => 45usize,
"from" => 45usize,
"END_TOKEN" => 45usize,
"::=" => 45usize,
"!!" => 45usize,
"blankmult" => 45usize,
"\0" => 45usize,
">=" => 45usize,
"nounor" => 45usize,
"|" => 45usize,
"/" => 45usize,
"unless" => 45usize,
":=" => 45usize,
"nounsub" => 45usize,
"and" => 45usize,
">" => 45usize,
"nouneq" => 45usize,
"+" => 45usize,
"nounpow" => 45usize,
"nounadd" => 45usize,
"*" => 45usize,
"else" => 45usize,
"+-" => 45usize,
"-" => 45usize,
"LIST_SEP" => 45usize,
"thru" => 45usize,
"^^" => 45usize,
"#pm#" => 45usize,
"!" => 45usize,
"<" => 45usize,
"]" => 45usize,
"while" => 45usize,
"~" => 45usize,
"elseif" => 45usize
},
phf_map! { /* 40 */
"in" => 46usize,
"while" => 44usize,
"thru" => 30usize,
"[" => 40usize,
"{" => 24usize,
"unless" => 12usize,
"from" => 94usize,
"]" => 31usize,
"'" => 88usize,
"if" => 22usize,
"STRING" => 60usize,
"not" => 2usize,
"UNARY_RECIP" => 76usize,
"#pm#" => 86usize,
"?? " => 74usize,
"+-" => 26usize,
"BOOL" => 34usize,
"?" => 32usize,
"ID" => 8usize,
"INT" => 10usize,
"|" => 18usize,
"FLOAT" => 36usize,
"+" => 96usize,
"''" => 20usize,
"step" => 92usize,
"(" => 80usize,
"not " => 54usize,
"next" => 28usize,
")" => 31usize,
"-" => 98usize,
"for" => 42usize,
"do" => 85usize,
"? " => 48usize,
"}" => 31usize
},
phf_map! { /* 41 */
"elseif" => 57usize,
"=" => 57usize,
"next" => 57usize,
":" => 57usize,
"#" => 57usize,
"]" => 57usize,
"nounsub" => 57usize,
"^" => 57usize,
"|" => 57usize,
"for" => 57usize,
"from" => 57usize,
"**" => 57usize,
"unless" => 57usize,
")" => 57usize,
"<=" => 57usize,
"::" => 57usize,
"^^" => 57usize,
"nouneq" => 57usize,
"nounor" => 57usize,
"while" => 57usize,
"<" => 57usize,
"step" => 57usize,
"then" => 57usize,
"in" => 57usize,
"!!" => 57usize,
"+-" => 57usize,
"(" => 57usize,
"else" => 57usize,
">" => 57usize,
"END_TOKEN" => 57usize,
"LIST_SEP" => 57usize,
":=" => 57usize,
"blankmult" => 57usize,
"+" => 57usize,
"and" => 57usize,
"#pm#" => 57usize,
"noundiv" => 57usize,
"*" => 57usize,
"." => 57usize,
"!" => 57usize,
"~" => 57usize,
"nounadd" => 57usize,
"do" => 57usize,
">=" => 57usize,
"nounpow" => 57usize,
"/" => 57usize,
"\0" => 57usize,
"[" => 57usize,
"STACKpmOPT" => 57usize,
"or" => 57usize,
"::=" => 57usize,
"thru" => 57usize,
"}" => 57usize,
"nounand" => 57usize,
"-" => 57usize
},
phf_map! { /* 42 */
"(" => 55usize,
"step" => 55usize,
"elseif" => 55usize,
"::=" => 55usize,
">=" => 55usize,
"nouneq" => 55usize,
"**" => 55usize,
"::" => 55usize,
"nounsub" => 55usize,
"+-" => 55usize,
"*" => 55usize,
"#" => 55usize,
"=" => 55usize,
"#pm#" => 55usize,
"next" => 55usize,
"and" => 55usize,
"do" => 55usize,
"+" => 55usize,
"then" => 55usize,
"in" => 55usize,
"!" => 55usize,
"nounand" => 55usize,
"noundiv" => 55usize,
"[" => 55usize,
"for" => 55usize,
"unless" => 55usize,
"blankmult" => 55usize,
"nounor" => 55usize,
"STACKpmOPT" => 55usize,
"^" => 55usize,
":" => 55usize,
"~" => 55usize,
"LIST_SEP" => 55usize,
">" => 55usize,
"<=" => 55usize,
"\0" => 55usize,
"<" => 55usize,
"/" => 55usize,
"nounadd" => 55usize,
"}" => 55usize,
"else" => 55usize,
"." => 55usize,
"from" => 55usize,
"END_TOKEN" => 55usize,
"|" => 55usize,
":=" => 55usize,
"thru" => 55usize,
"^^" => 55usize,
"or" => 55usize,
")" => 55usize,
"]" => 55usize,
"!!" => 55usize,
"nounpow" => 55usize,
"while" => 55usize,
"-" => 55usize
},
phf_map! { /* 43 */
"not" => 2usize,
"in" => 46usize,
"do" => 85usize,
"unless" => 12usize,
"for" => 42usize,
"INT" => 10usize,
"? " => 48usize,
"-" => 98usize,
"thru" => 30usize,
"?? " => 74usize,
"next" => 28usize,
"{" => 24usize,
"#pm#" => 86usize,
"[" => 40usize,
"FLOAT" => 36usize,
"step" => 92usize,
"?" => 32usize,
"from" => 94usize,
"|" => 18usize,
"if" => 22usize,
"+-" => 26usize,
"while" => 44usize,
"UNARY_RECIP" => 76usize,
"STRING" => 60usize,
"+" => 96usize,
"ID" => 8usize,
"BOOL" => 34usize,
"''" => 20usize,
"'" => 88usize,
"(" => 80usize,
"not " => 54usize
},
phf_map! { /* 44 */
"|" => 18usize,
"do" => 85usize,
"''" => 20usize,
"[" => 40usize,
"?" => 32usize,
"FLOAT" => 36usize,
"BOOL" => 34usize,
"from" => 94usize,
"unless" => 12usize,
"step" => 92usize,
"while" => 44usize,
"?? " => 74usize,
"INT" => 10usize,
"UNARY_RECIP" => 76usize,
"(" => 80usize,
"+" => 96usize,
"+-" => 26usize,
"ID" => 8usize,
"{" => 24usize,
"not " => 54usize,
"-" => 98usize,
"for" => 42usize,
"thru" => 30usize,
"next" => 28usize,
"STRING" => 60usize,
"#pm#" => 86usize,
"? " => 48usize,
"'" => 88usize,
"not" => 2usize,
"if" => 22usize,
"in" => 46usize
},
phf_map! { /* 45 */
"blankmult" => 226usize,
"." => 204usize,
"#" => 182usize,
"for" => 37usize,
"]" => 37usize,
"::=" => 170usize,
"/" => 172usize,
"LIST_SEP" => 37usize,
"::" => 186usize,
"thru" => 37usize,
"=" => 178usize,
"-" => 214usize,
"~" => 218usize,
"<" => 212usize,
"STACKpmOPT" => 192usize,
"noundiv" => 202usize,
"END_TOKEN" => 37usize,
"}" => 37usize,
"next" => 37usize,
"while" => 37usize,
">=" => 216usize,
":=" => 206usize,
"do" => 37usize,
"*" => 210usize,
"and" => 164usize,
"elseif" => 37usize,
"from" => 37usize,
"+" => 160usize,
">" => 184usize,
"!!" => 222usize,
"else" => 37usize,
"nouneq" => 166usize,
"!" => 194usize,
"unless" => 37usize,
"**" => 220usize,
"^" => 168usize,
"nounadd" => 188usize,
"nounand" => 196usize,
")" => 37usize,
"|" => 37usize,
"nounpow" => 180usize,
"^^" => 174usize,
":" => 176usize,
"step" => 37usize,
"in" => 37usize,
"#pm#" => 200usize,
"+-" => 198usize,
"nounsub" => 190usize,
"<=" => 208usize,
"nounor" => 162usize,
"or" => 224usize,
"then" => 37usize,
"\0" => 37usize
},
phf_map! { /* 46 */
"#pm#" => 86usize,
"+-" => 26usize,
"ID" => 8usize,
"thru" => 30usize,
"(" => 80usize,
"? " => 48usize,
"not" => 2usize,
"while" => 44usize,
"BOOL" => 34usize,
"for" => 42usize,
"+" => 96usize,
"next" => 28usize,
"'" => 88usize,
"?? " => 74usize,
"{" => 24usize,
"-" => 98usize,
"?" => 32usize,
"''" => 20usize,
"|" => 18usize,
"do" => 85usize,
"UNARY_RECIP" => 76usize,
"step" => 92usize,
"not " => 54usize,
"unless" => 12usize,
"from" => 94usize,
"FLOAT" => 36usize,
"INT" => 10usize,
"if" => 22usize,
"in" => 46usize,
"STRING" => 60usize,
"[" => 40usize
},
phf_map! { /* 47 */
"STRING" => 60usize,
"UNARY_RECIP" => 76usize,
"for" => 42usize,
"if" => 22usize,
"FLOAT" => 36usize,
"while" => 44usize,
"in" => 46usize,
"(" => 80usize,
"-" => 98usize,
"not" => 2usize,
"[" => 40usize,
"+" => 96usize,
"'" => 88usize,
"BOOL" => 34usize,
"?" => 32usize,
"?? " => 74usize,
"next" => 28usize,
"''" => 20usize,
"{" => 24usize,
"not " => 54usize,
"do" => 85usize,
"from" => 94usize,
"#pm#" => 86usize,
"step" => 92usize,
"ID" => 8usize,
"thru" => 30usize,
"INT" => 10usize,
"unless" => 12usize,
"? " => 48usize,
"|" => 18usize,
"+-" => 26usize
},
phf_map! { /* 48 */
"next" => 28usize,
"? " => 48usize,
"+-" => 26usize,
"''" => 20usize,
"[" => 40usize,
"BOOL" => 34usize,
"INT" => 10usize,
"UNARY_RECIP" => 76usize,
"?" => 32usize,
"thru" => 30usize,
"unless" => 12usize,
"while" => 44usize,
"if" => 22usize,
"step" => 92usize,
"not" => 2usize,
"?? " => 74usize,
"STRING" => 60usize,
"(" => 80usize,
"FLOAT" => 36usize,
"|" => 18usize,
"+" => 96usize,
"do" => 85usize,
"not " => 54usize,
"{" => 24usize,
"in" => 46usize,
"#pm#" => 86usize,
"ID" => 8usize,
"from" => 94usize,
"'" => 88usize,
"for" => 42usize,
"-" => 98usize
},
phf_map! { /* 49 */
"from" => 94usize,
"step" => 92usize,
"ID" => 8usize,
"+" => 96usize,
"+-" => 26usize,
"thru" => 30usize,
"?" => 32usize,
"''" => 20usize,
"? " => 48usize,
"|" => 18usize,
"{" => 24usize,
"-" => 98usize,
"unless" => 12usize,
"next" => 28usize,
"?? " => 74usize,
"BOOL" => 34usize,
"'" => 88usize,
"(" => 80usize,
"INT" => 10usize,
"#pm#" => 86usize,
"do" => 85usize,
"while" => 44usize,
"UNARY_RECIP" => 76usize,
"STRING" => 60usize,
"if" => 22usize,
"in" => 46usize,
"for" => 42usize,
"[" => 40usize,
"not " => 54usize,
"FLOAT" => 36usize,
"not" => 2usize
},
phf_map! { /* 50 */
"else" => 125usize,
"thru" => 125usize,
"elseif" => 125usize,
"or" => 125usize,
"unless" => 125usize,
"nounpow" => 125usize,
"::" => 125usize,
"!!" => 125usize,
"::=" => 125usize,
"^" => 125usize,
")" => 125usize,
"<" => 125usize,
"<=" => 125usize,
"nounadd" => 125usize,
"in" => 125usize,
"~" => 125usize,
"STACKpmOPT" => 125usize,
"|" => 125usize,
"**" => 125usize,
"." => 125usize,
"#pm#" => 125usize,
"step" => 125usize,
"and" => 125usize,
":" => 125usize,
"noundiv" => 125usize,
"]" => 125usize,
"^^" => 125usize,
"/" => 125usize,
"\0" => 125usize,
"while" => 125usize,
"nouneq" => 125usize,
"}" => 125usize,
"END_TOKEN" => 125usize,
"-" => 125usize,
"#" => 125usize,
">" => 125usize,
":=" => 125usize,
">=" => 125usize,
"=" => 125usize,
"LIST_SEP" => 125usize,
"from" => 125usize,
"!" => 125usize,
"nounsub" => 125usize,
"then" => 125usize,
"+-" => 125usize,
"do" => 125usize,
"nounand" => 125usize,
"nounor" => 125usize,
"next" => 125usize,
"*" => 125usize,
"blankmult" => 125usize,
"+" => 125usize,
"for" => 125usize
},
phf_map! { /* 51 */
"step" => 101usize,
"next" => 101usize,
"thru" => 101usize,
"for" => 101usize,
"from" => 101usize,
"unless" => 101usize,
"do" => 101usize,
"while" => 101usize,
"in" => 101usize
},
phf_map! { /* 52 */
"-" => 98usize,
"do" => 85usize,
"|" => 18usize,
"unless" => 12usize,
"next" => 28usize,
"STRING" => 60usize,
"(" => 80usize,
"while" => 44usize,
"FLOAT" => 36usize,
"ID" => 8usize,
"not" => 2usize,
"UNARY_RECIP" => 76usize,
"? " => 48usize,
"[" => 40usize,
"+" => 96usize,
"{" => 24usize,
"''" => 20usize,
"if" => 22usize,
"#pm#" => 86usize,
"not " => 54usize,
"+-" => 26usize,
"for" => 42usize,
"thru" => 30usize,
"step" => 92usize,
"BOOL" => 34usize,
"'" => 88usize,
"from" => 94usize,
"?" => 32usize,
"?? " => 74usize,
"in" => 46usize,
"INT" => 10usize
},
phf_map! { /* 53 */
"and" => 164usize,
"<" => 212usize,
"." => 204usize,
"nounor" => 162usize,
"nouneq" => 166usize,
"or" => 224usize,
"nounadd" => 188usize,
"+-" => 198usize,
"=" => 178usize,
"-" => 214usize,
":" => 176usize,
"*" => 210usize,
"::" => 186usize,
"^^" => 174usize,
"~" => 218usize,
"noundiv" => 202usize,
"blankmult" => 226usize,
"|" => 238usize,
">=" => 216usize,
"#" => 182usize,
":=" => 206usize,
"^" => 168usize,
"STACKpmOPT" => 192usize,
"!" => 194usize,
"+" => 160usize,
"/" => 172usize,
"!!" => 222usize,
"nounpow" => 180usize,
"#pm#" => 200usize,
"**" => 220usize,
"nounsub" => 190usize,
"::=" => 170usize,
"<=" => 208usize,
"nounand" => 196usize,
">" => 184usize
},
phf_map! { /* 54 */
"while" => 121usize,
"in" => 121usize,
">" => 121usize,
"nouneq" => 121usize,
"#" => 121usize,
"**" => 121usize,
"for" => 121usize,
"]" => 121usize,
"<" => 121usize,
"and" => 121usize,
")" => 121usize,
"<=" => 121usize,
"step" => 121usize,
"+-" => 121usize,
"#pm#" => 121usize,
"-" => 121usize,
":=" => 121usize,
"END_TOKEN" => 121usize,
"unless" => 121usize,
"LIST_SEP" => 121usize,
"next" => 121usize,
"\0" => 121usize,
"from" => 121usize,
"thru" => 121usize,
"STACKpmOPT" => 121usize,
"nounpow" => 121usize,
"nounsub" => 121usize,
"!!" => 121usize,
"do" => 121usize,
"else" => 121usize,
"+" => 121usize,
"^^" => 121usize,
"^" => 121usize,
"=" => 121usize,
"|" => 121usize,
"." => 121usize,
"/" => 121usize,
":" => 121usize,
"!" => 121usize,
"~" => 121usize,
"::=" => 121usize,
"*" => 121usize,
"blankmult" => 121usize,
"nounor" => 121usize,
"then" => 121usize,
"nounand" => 121usize,
"elseif" => 121usize,
"}" => 121usize,
"noundiv" => 121usize,
"::" => 121usize,
"nounadd" => 121usize,
"or" => 121usize,
">=" => 121usize
},
phf_map! { /* 55 */
"then" => 240usize
},
phf_map! { /* 56 */
"]" => 35usize,
"LIST_SEP" => 244usize,
")" => 35usize,
"}" => 35usize
},
phf_map! { /* 57 */
"}" => 246usize
},
phf_map! { /* 58 */
"nounsub" => 117usize,
"**" => 220usize,
"=" => 117usize,
"do" => 117usize,
"." => 204usize,
"^" => 168usize,
"in" => 117usize,
"then" => 117usize,
"<" => 117usize,
"!!" => 222usize,
"<=" => 117usize,
":=" => 117usize,
"thru" => 117usize,
"::" => 117usize,
"\0" => 117usize,
"from" => 117usize,
"^^" => 174usize,
"nouneq" => 117usize,
"LIST_SEP" => 117usize,
"step" => 117usize,
"-" => 117usize,
"END_TOKEN" => 117usize,
"]" => 117usize,
"blankmult" => 226usize,
"~" => 218usize,
"|" => 117usize,
"!" => 194usize,
"+" => 117usize,
"nounand" => 196usize,
"next" => 117usize,
"elseif" => 117usize,
"+-" => 198usize,
"::=" => 117usize,
"*" => 210usize,
"and" => 164usize,
">=" => 117usize,
"STACKpmOPT" => 192usize,
"#" => 117usize,
"nounor" => 162usize,
"#pm#" => 200usize,
">" => 117usize,
"/" => 172usize,
"for" => 117usize,
"or" => 224usize,
"nounadd" => 117usize,
"}" => 117usize,
")" => 117usize,
"unless" => 117usize,
"noundiv" => 202usize,
":" => 117usize,
"nounpow" => 180usize,
"while" => 117usize,
"else" => 117usize
},
phf_map! { /* 59 */
"next" => 93usize,
"thru" => 93usize,
"while" => 93usize,
"unless" => 93usize,
"for" => 93usize,
"step" => 93usize,
"from" => 93usize,
"in" => 93usize,
"do" => 93usize
},
phf_map! { /* 60 */
"thru" => 97usize,
"next" => 97usize,
"step" => 97usize,
"in" => 97usize,
"do" => 97usize,
"unless" => 97usize,
"from" => 97usize,
"for" => 97usize,
"while" => 97usize
},
phf_map! { /* 61 */
"\0" => 133usize,
"*" => 133usize,
"**" => 133usize,
"next" => 133usize,
"}" => 133usize,
"for" => 133usize,
"unless" => 133usize,
"else" => 133usize,
"|" => 133usize,
"while" => 133usize,
"nouneq" => 133usize,
"from" => 133usize,
">" => 133usize,
":" => 133usize,
"]" => 133usize,
"do" => 133usize,
"+-" => 133usize,
"::" => 133usize,
"noundiv" => 133usize,
"." => 133usize,
"^^" => 133usize,
"!" => 133usize,
":=" => 133usize,
"step" => 133usize,
"LIST_SEP" => 133usize,
")" => 133usize,
"END_TOKEN" => 133usize,
"elseif" => 133usize,
">=" => 133usize,
"nounsub" => 133usize,
"^" => 133usize,
"nounor" => 133usize,
"/" => 133usize,
"=" => 133usize,
"nounand" => 133usize,
"thru" => 133usize,
"~" => 133usize,
"::=" => 133usize,
"nounpow" => 133usize,
"nounadd" => 133usize,
"in" => 133usize,
"and" => 133usize,
"#" => 133usize,
"-" => 133usize,
"!!" => 133usize,
"STACKpmOPT" => 133usize,
"<" => 133usize,
"or" => 133usize,
"then" => 133usize,
"#pm#" => 133usize,
"<=" => 133usize,
"+" => 133usize,
"blankmult" => 133usize
},
phf_map! { /* 62 */
"|" => 51usize,
"!" => 51usize,
"step" => 51usize,
"::=" => 51usize,
"thru" => 51usize,
"/" => 51usize,
"::" => 51usize,
"from" => 51usize,
"nounand" => 51usize,
"-" => 51usize,
">=" => 51usize,
"and" => 51usize,
"next" => 51usize,
"for" => 51usize,
"]" => 51usize,
"." => 51usize,
"(" => 51usize,
")" => 51usize,
"[" => 51usize,
"+" => 51usize,
"^" => 51usize,
"noundiv" => 51usize,
"nounpow" => 51usize,
"\0" => 51usize,
"in" => 51usize,
":" => 51usize,
"+-" => 51usize,
"#pm#" => 51usize,
"nounor" => 51usize,
"nounsub" => 51usize,
"blankmult" => 51usize,
"LIST_SEP" => 51usize,
":=" => 51usize,
"}" => 51usize,
"then" => 51usize,
"END_TOKEN" => 51usize,
">" => 51usize,
"<=" => 51usize,
"do" => 51usize,
"!!" => 51usize,
"nouneq" => 51usize,
"**" => 51usize,
"=" => 51usize,
"#" => 51usize,
"<" => 51usize,
"else" => 51usize,
"unless" => 51usize,
"nounadd" => 51usize,
"elseif" => 51usize,
"^^" => 51usize,
"STACKpmOPT" => 51usize,
"while" => 51usize,
"*" => 51usize,
"or" => 51usize,
"~" => 51usize
},
phf_map! { /* 63 */
"]" => 248usize
},
phf_map! { /* 64 */
"next" => 87usize,
"do" => 87usize,
"unless" => 87usize,
"in" => 87usize,
"from" => 87usize,
"for" => 87usize,
"thru" => 87usize,
"step" => 87usize,
"while" => 87usize
},
phf_map! { /* 65 */
"for" => 99usize,
"do" => 99usize,
"in" => 99usize,
"while" => 99usize,
"from" => 99usize,
"thru" => 99usize,
"next" => 99usize,
"step" => 99usize,
"unless" => 99usize
},
phf_map! { /* 66 */
"from" => 95usize,
"next" => 95usize,
"thru" => 95usize,
"in" => 95usize,
"while" => 95usize,
"unless" => 95usize,
"step" => 95usize,
"do" => 95usize,
"for" => 95usize
},
phf_map! { /* 67 */
"elseif" => 131usize,
"next" => 131usize,
"::" => 131usize,
"thru" => 131usize,
"nounor" => 131usize,
"nouneq" => 131usize,
">=" => 131usize,
"]" => 131usize,
"for" => 131usize,
"unless" => 131usize,
"/" => 131usize,
"from" => 131usize,
"noundiv" => 131usize,
"^^" => 131usize,
"=" => 131usize,
"END_TOKEN" => 131usize,
"-" => 131usize,
"do" => 131usize,
"nounadd" => 131usize,
")" => 131usize,
"while" => 131usize,
"blankmult" => 131usize,
"in" => 131usize,
"<=" => 131usize,
"<" => 131usize,
"::=" => 131usize,
"!!" => 131usize,
"step" => 131usize,
"}" => 131usize,
"or" => 131usize,
"\0" => 131usize,
"**" => 131usize,
":" => 131usize,
"STACKpmOPT" => 131usize,
"!" => 131usize,
"*" => 131usize,
">" => 131usize,
"nounpow" => 131usize,
"nounsub" => 131usize,
"." => 131usize,
"then" => 131usize,
"|" => 131usize,
"+" => 131usize,
"#pm#" => 131usize,
"LIST_SEP" => 131usize,
"else" => 131usize,
"and" => 131usize,
"^" => 131usize,
"~" => 131usize,
"+-" => 131usize,
"#" => 131usize,
"nounand" => 131usize,
":=" => 131usize
},
phf_map! { /* 68 */
"*" => 63usize,
":=" => 63usize,
"thru" => 63usize,
">" => 63usize,
"else" => 63usize,
"nounadd" => 63usize,
"next" => 63usize,
"blankmult" => 63usize,
"<" => 63usize,
"!" => 63usize,
"nounand" => 63usize,
"elseif" => 63usize,
"END_TOKEN" => 63usize,
"<=" => 63usize,
"noundiv" => 63usize,
"::=" => 63usize,
"step" => 63usize,
"unless" => 63usize,
"from" => 63usize,
"(" => 80usize,
"nouneq" => 63usize,
"~" => 63usize,
"**" => 63usize,
")" => 63usize,
"!!" => 63usize,
"while" => 63usize,
"#pm#" => 63usize,
"STACKpmOPT" => 63usize,
"^" => 63usize,
"and" => 63usize,
"nounpow" => 63usize,
"for" => 63usize,
"|" => 63usize,
"or" => 63usize,
"+" => 63usize,
"[" => 40usize,
"then" => 63usize,
":" => 63usize,
"/" => 63usize,
"#" => 63usize,
"-" => 63usize,
"]" => 63usize,
"::" => 63usize,
"." => 63usize,
"nounsub" => 63usize,
"do" => 63usize,
">=" => 63usize,
"nounor" => 63usize,
"\0" => 63usize,
"^^" => 63usize,
"}" => 63usize,
"LIST_SEP" => 63usize,
"in" => 63usize,
"+-" => 63usize,
"=" => 63usize
},
phf_map! { /* 69 */
"nounpow" => 63usize,
"}" => 63usize,
"END_TOKEN" => 63usize,
"!" => 63usize,
"noundiv" => 63usize,
"blankmult" => 63usize,
"#" => 63usize,
"elseif" => 63usize,
"nounsub" => 63usize,
">" => 63usize,
"^^" => 63usize,
":=" => 63usize,
"(" => 80usize,
"+-" => 63usize,
"-" => 63usize,
"and" => 63usize,
"|" => 63usize,
"<=" => 63usize,
"LIST_SEP" => 63usize,
"~" => 63usize,
"from" => 63usize,
"=" => 63usize,
"+" => 63usize,
"STACKpmOPT" => 63usize,
"unless" => 63usize,
"/" => 63usize,
"nounor" => 63usize,
"::=" => 63usize,
">=" => 63usize,
"do" => 63usize,
"step" => 63usize,
"[" => 40usize,
"<" => 63usize,
"next" => 63usize,
"]" => 63usize,
"^" => 63usize,
"!!" => 63usize,
")" => 63usize,
"in" => 63usize,
"nounadd" => 63usize,
"\0" => 63usize,
"nounand" => 63usize,
"then" => 63usize,
"nouneq" => 63usize,
"." => 63usize,
"::" => 63usize,
"**" => 63usize,
"*" => 63usize,
":" => 63usize,
"for" => 63usize,
"thru" => 63usize,
"while" => 63usize,
"else" => 63usize,
"or" => 63usize,
"#pm#" => 63usize
},
phf_map! { /* 70 */
"nounand" => 59usize,
"LIST_SEP" => 59usize,
"and" => 59usize,
"\0" => 59usize,
"for" => 59usize,
"**" => 59usize,
"else" => 59usize,
"#pm#" => 59usize,
"while" => 59usize,
"then" => 59usize,
"step" => 59usize,
"in" => 59usize,
"#" => 59usize,
"END_TOKEN" => 59usize,
"thru" => 59usize,
":=" => 59usize,
">=" => 59usize,
":" => 59usize,
"do" => 59usize,
"^^" => 59usize,
"STACKpmOPT" => 59usize,
"|" => 59usize,
"blankmult" => 59usize,
")" => 59usize,
"-" => 59usize,
"=" => 59usize,
"::" => 59usize,
"]" => 59usize,
"<=" => 59usize,
"unless" => 59usize,
"." => 59usize,
"nounor" => 59usize,
"next" => 59usize,
"nouneq" => 59usize,
"or" => 59usize,
"!!" => 59usize,
"nounpow" => 59usize,
"~" => 59usize,
"}" => 59usize,
"/" => 59usize,
"!" => 59usize,
">" => 59usize,
"*" => 59usize,
"noundiv" => 59usize,
"^" => 59usize,
"::=" => 59usize,
"elseif" => 59usize,
"+-" => 59usize,
"nounsub" => 59usize,
"<" => 59usize,
"nounadd" => 59usize,
"from" => 59usize,
"+" => 59usize
},
phf_map! { /* 71 */
"END_TOKEN" => 127usize,
"and" => 164usize,
"noundiv" => 202usize,
":" => 127usize,
"=" => 127usize,
"nounor" => 162usize,
"nounadd" => 188usize,
"~" => 218usize,
"!!" => 222usize,
"#" => 127usize,
"next" => 127usize,
">=" => 127usize,
"or" => 224usize,
"elseif" => 127usize,
"::" => 127usize,
"^" => 168usize,
"+" => 160usize,
"else" => 127usize,
"nounand" => 196usize,
"nounpow" => 180usize,
"nouneq" => 127usize,
"::=" => 127usize,
"for" => 127usize,
"*" => 210usize,
")" => 127usize,
"in" => 127usize,
"<=" => 127usize,
">" => 127usize,
"then" => 127usize,
"-" => 214usize,
"thru" => 127usize,
"#pm#" => 200usize,
"^^" => 174usize,
"nounsub" => 190usize,
"!" => 194usize,
"<" => 127usize,
"**" => 220usize,
"while" => 127usize,
"unless" => 127usize,
"blankmult" => 226usize,
"." => 204usize,
"}" => 127usize,
"/" => 172usize,
"do" => 127usize,
":=" => 127usize,
"STACKpmOPT" => 192usize,
"LIST_SEP" => 127usize,
"step" => 127usize,
"\0" => 127usize,
"+-" => 198usize,
"from" => 127usize,
"|" => 127usize,
"]" => 127usize
},
phf_map! { /* 72 */
"do" => 83usize
},
phf_map! { /* 73 */
"END_TOKEN" => 256usize,
"\0" => 11usize
},
phf_map! { /* 74 */
"ID" => 258usize
},
phf_map! { /* 75 */
"*" => 129usize,
"/" => 129usize,
"<" => 129usize,
"#" => 129usize,
"=" => 129usize,
"from" => 129usize,
"nounsub" => 129usize,
"-" => 129usize,
"!!" => 129usize,
"nounor" => 129usize,
"nounpow" => 129usize,
"^^" => 129usize,
"]" => 129usize,
"::" => 129usize,
"in" => 129usize,
"blankmult" => 129usize,
"END_TOKEN" => 129usize,
"then" => 129usize,
"**" => 129usize,
"<=" => 129usize,
"unless" => 129usize,
":=" => 129usize,
"elseif" => 129usize,
"noundiv" => 129usize,
"thru" => 129usize,
"and" => 129usize,
"!" => 129usize,
"~" => 129usize,
"STACKpmOPT" => 129usize,
"next" => 129usize,
"while" => 129usize,
"}" => 129usize,
">" => 129usize,
"nounand" => 129usize,
"^" => 129usize,
"nouneq" => 129usize,
"LIST_SEP" => 129usize,
")" => 129usize,
"nounadd" => 129usize,
"+-" => 129usize,
"::=" => 129usize,
"\0" => 129usize,
"." => 129usize,
"do" => 129usize,
">=" => 129usize,
"+" => 129usize,
"|" => 129usize,
"#pm#" => 129usize,
"step" => 129usize,
"else" => 129usize,
"for" => 129usize,
"or" => 129usize,
":" => 129usize
},
phf_map! { /* 76 */
"thru" => 135usize,
"**" => 220usize,
"<" => 135usize,
"." => 204usize,
"::" => 135usize,
":=" => 135usize,
"!!" => 222usize,
"blankmult" => 226usize,
"LIST_SEP" => 135usize,
"or" => 224usize,
"and" => 164usize,
"-" => 214usize,
"~" => 218usize,
"noundiv" => 202usize,
"/" => 172usize,
"*" => 210usize,
"then" => 135usize,
"elseif" => 135usize,
"step" => 135usize,
"unless" => 135usize,
"nounadd" => 188usize,
">" => 135usize,
"::=" => 135usize,
"#" => 135usize,
":" => 135usize,
"from" => 135usize,
"nounand" => 196usize,
"!" => 194usize,
"^^" => 174usize,
"=" => 135usize,
"nouneq" => 135usize,
"|" => 135usize,
"]" => 135usize,
"else" => 135usize,
"+-" => 198usize,
"END_TOKEN" => 135usize,
"while" => 135usize,
"nounor" => 162usize,
">=" => 135usize,
"for" => 135usize,
"nounsub" => 190usize,
"+" => 160usize,
"nounpow" => 180usize,
"do" => 135usize,
"STACKpmOPT" => 192usize,
"^" => 168usize,
"in" => 135usize,
"}" => 135usize,
"\0" => 135usize,
"#pm#" => 200usize,
"<=" => 135usize,
"next" => 135usize,
")" => 135usize
},
phf_map! { /* 77 */
")" => 260usize
},
phf_map! { /* 78 */
">" => 119usize,
"next" => 119usize,
"thru" => 119usize,
"/" => 172usize,
"**" => 220usize,
"noundiv" => 202usize,
"nounsub" => 119usize,
"]" => 119usize,
"else" => 119usize,
"or" => 224usize,
"END_TOKEN" => 119usize,
"|" => 119usize,
"+-" => 198usize,
"!" => 194usize,
"}" => 119usize,
"step" => 119usize,
"nounpow" => 180usize,
"::" => 119usize,
"\0" => 119usize,
"::=" => 119usize,
"for" => 119usize,
":" => 119usize,
"do" => 119usize,
"unless" => 119usize,
"." => 204usize,
"=" => 119usize,
"<" => 119usize,
"STACKpmOPT" => 192usize,
"LIST_SEP" => 119usize,
"and" => 164usize,
"nounadd" => 119usize,
"elseif" => 119usize,
":=" => 119usize,
"+" => 119usize,
"nouneq" => 119usize,
"#" => 119usize,
"<=" => 119usize,
"then" => 119usize,
"in" => 119usize,
")" => 119usize,
"-" => 119usize,
"^^" => 174usize,
"while" => 119usize,
"*" => 210usize,
"blankmult" => 226usize,
"#pm#" => 200usize,
"^" => 168usize,
"from" => 119usize,
"~" => 218usize,
"!!" => 222usize,
"nounand" => 196usize,
"nounor" => 162usize,
">=" => 119usize
},
phf_map! { /* 79 */
"while" => 123usize,
"::" => 123usize,
"^^" => 123usize,
"noundiv" => 123usize,
"for" => 123usize,
"|" => 123usize,
"/" => 123usize,
"+" => 123usize,
"**" => 123usize,
"+-" => 123usize,
"do" => 123usize,
"}" => 123usize,
"<" => 123usize,
"next" => 123usize,
"nounor" => 123usize,
"#" => 123usize,
"elseif" => 123usize,
"-" => 123usize,
"END_TOKEN" => 123usize,
"step" => 123usize,
"nounand" => 123usize,
"!" => 123usize,
"nounadd" => 123usize,
"#pm#" => 123usize,
"STACKpmOPT" => 123usize,
"or" => 123usize,
"^" => 123usize,
"nounpow" => 123usize,
">=" => 123usize,
":=" => 123usize,
"then" => 123usize,
">" => 123usize,
":" => 123usize,
"thru" => 123usize,
"from" => 123usize,
"::=" => 123usize,
"*" => 123usize,
"nounsub" => 123usize,
"else" => 123usize,
"and" => 123usize,
"unless" => 123usize,
")" => 123usize,
"<=" => 123usize,
"]" => 123usize,
"blankmult" => 123usize,
"." => 123usize,
"nouneq" => 123usize,
"in" => 123usize,
"!!" => 123usize,
"=" => 123usize,
"~" => 123usize,
"\0" => 123usize,
"LIST_SEP" => 123usize
},
phf_map! { /* 80 */
"not" => 2usize,
"?" => 32usize,
"ID" => 8usize,
"-" => 98usize,
"while" => 44usize,
"do" => 85usize,
"'" => 88usize,
"{" => 24usize,
"thru" => 30usize,
"for" => 42usize,
"[" => 40usize,
"if" => 22usize,
"?? " => 74usize,
"? " => 48usize,
"+" => 96usize,
"step" => 92usize,
"BOOL" => 34usize,
"|" => 18usize,
"FLOAT" => 36usize,
"unless" => 12usize,
"next" => 28usize,
"INT" => 10usize,
"from" => 94usize,
"not " => 54usize,
"STRING" => 60usize,
"UNARY_RECIP" => 76usize,
"''" => 20usize,
"(" => 80usize,
"in" => 46usize,
"#pm#" => 86usize,
"+-" => 26usize
},
phf_map! { /* 81 */
"INT" => 10usize,
"in" => 46usize,
"{" => 24usize,
"FLOAT" => 36usize,
"for" => 42usize,
"''" => 20usize,
"do" => 85usize,
"?" => 32usize,
"(" => 80usize,
"unless" => 12usize,
"thru" => 30usize,
"ID" => 8usize,
"'" => 88usize,
"not " => 54usize,
"not" => 2usize,
"#pm#" => 86usize,
"while" => 44usize,
"-" => 98usize,
"?? " => 74usize,
"UNARY_RECIP" => 76usize,
"[" => 40usize,
"STRING" => 60usize,
"+-" => 26usize,
"|" => 18usize,
"if" => 22usize,
"? " => 48usize,
"+" => 96usize,
"BOOL" => 34usize,
"next" => 28usize,
"from" => 94usize,
"step" => 92usize
},
phf_map! { /* 82 */
"(" => 80usize,
"thru" => 30usize,
"for" => 42usize,
"BOOL" => 34usize,
"next" => 28usize,
"'" => 88usize,
"in" => 46usize,
"FLOAT" => 36usize,
"''" => 20usize,
"unless" => 12usize,
"? " => 48usize,
"?? " => 74usize,
"not" => 2usize,
"+-" => 26usize,
"while" => 44usize,
"step" => 92usize,
"ID" => 8usize,
"#pm#" => 86usize,
"not " => 54usize,
"[" => 40usize,
"-" => 98usize,
"from" => 94usize,
"if" => 22usize,
"?" => 32usize,
"+" => 96usize,
"UNARY_RECIP" => 76usize,
"STRING" => 60usize,
"do" => 85usize,
"INT" => 10usize,
"|" => 18usize,
"{" => 24usize
},
phf_map! { /* 83 */
"(" => 80usize,
"STRING" => 60usize,
"do" => 85usize,
"?? " => 74usize,
"for" => 42usize,
"ID" => 8usize,
"next" => 28usize,
"UNARY_RECIP" => 76usize,
"{" => 24usize,
"from" => 94usize,
"+" => 96usize,
"BOOL" => 34usize,
"#pm#" => 86usize,
"''" => 20usize,
"+-" => 26usize,
"INT" => 10usize,
"unless" => 12usize,
"-" => 98usize,
"while" => 44usize,
"in" => 46usize,
"'" => 88usize,
"[" => 40usize,
"FLOAT" => 36usize,
"thru" => 30usize,
"|" => 18usize,
"if" => 22usize,
"not " => 54usize,
"?" => 32usize,
"? " => 48usize,
"not" => 2usize,
"step" => 92usize
},
phf_map! { /* 84 */
"from" => 94usize,
"''" => 20usize,
"{" => 24usize,
"for" => 42usize,
"ID" => 8usize,
"'" => 88usize,
"?" => 32usize,
"BOOL" => 34usize,
"-" => 98usize,
"? " => 48usize,
"#pm#" => 86usize,
"in" => 46usize,
"while" => 44usize,
"do" => 85usize,
"|" => 18usize,
"INT" => 10usize,
"unless" => 12usize,
"+" => 96usize,
"[" => 40usize,
"not " => 54usize,
"UNARY_RECIP" => 76usize,
"FLOAT" => 36usize,
"if" => 22usize,
"step" => 92usize,
"thru" => 30usize,
"not" => 2usize,
"STRING" => 60usize,
"next" => 28usize,
"?? " => 74usize,
"(" => 80usize,
"+-" => 26usize
},
phf_map! { /* 85 */
"thru" => 30usize,
"in" => 46usize,
"?" => 32usize,
"UNARY_RECIP" => 76usize,
"? " => 48usize,
"do" => 85usize,
"''" => 20usize,
"|" => 18usize,
"from" => 94usize,
"(" => 80usize,
"+-" => 26usize,
"while" => 44usize,
"ID" => 8usize,
"[" => 40usize,
"BOOL" => 34usize,
"'" => 88usize,
"not" => 2usize,
"step" => 92usize,
"FLOAT" => 36usize,
"if" => 22usize,
"for" => 42usize,
"INT" => 10usize,
"next" => 28usize,
"#pm#" => 86usize,
"unless" => 12usize,
"?? " => 74usize,
"+" => 96usize,
"{" => 24usize,
"-" => 98usize,
"STRING" => 60usize,
"not " => 54usize
},
phf_map! { /* 86 */
"UNARY_RECIP" => 76usize,
"-" => 98usize,
"next" => 28usize,
"#pm#" => 86usize,
"(" => 80usize,
"INT" => 10usize,
"'" => 88usize,
"not " => 54usize,
"step" => 92usize,
"while" => 44usize,
"+" => 96usize,
"FLOAT" => 36usize,
"?? " => 74usize,
"? " => 48usize,
"thru" => 30usize,
"from" => 94usize,
"unless" => 12usize,
"''" => 20usize,
"not" => 2usize,
"do" => 85usize,
"ID" => 8usize,
"for" => 42usize,
"|" => 18usize,
"BOOL" => 34usize,
"+-" => 26usize,
"?" => 32usize,
"in" => 46usize,
"{" => 24usize,
"[" => 40usize,
"if" => 22usize,
"STRING" => 60usize
},
phf_map! { /* 87 */
"'" => 88usize,
"#pm#" => 86usize,
"thru" => 30usize,
"INT" => 10usize,
"next" => 28usize,
"not" => 2usize,
"(" => 80usize,
"-" => 98usize,
"?" => 32usize,
"? " => 48usize,
"step" => 92usize,
"FLOAT" => 36usize,
"{" => 24usize,
"|" => 18usize,
"if" => 22usize,
"STRING" => 60usize,
"ID" => 8usize,
"?? " => 74usize,
"not " => 54usize,
"in" => 46usize,
"+" => 96usize,
"BOOL" => 34usize,
"[" => 40usize,
"+-" => 26usize,
"for" => 42usize,
"do" => 85usize,
"unless" => 12usize,
"while" => 44usize,
"UNARY_RECIP" => 76usize,
"from" => 94usize,
"''" => 20usize
},
phf_map! { /* 88 */
"do" => 85usize,
"for" => 42usize,
"-" => 98usize,
"{" => 24usize,
"INT" => 10usize,
"+-" => 26usize,
"in" => 46usize,
"''" => 20usize,
"step" => 92usize,
"unless" => 12usize,
"(" => 80usize,
"'" => 88usize,
"thru" => 30usize,
"if" => 22usize,
"while" => 44usize,
"#pm#" => 86usize,
"|" => 18usize,
"UNARY_RECIP" => 76usize,
"next" => 28usize,
"[" => 40usize,
"not" => 2usize,
"not " => 54usize,
"BOOL" => 34usize,
"ID" => 8usize,
"+" => 96usize,
"?" => 32usize,
"FLOAT" => 36usize,
"STRING" => 60usize,
"?? " => 74usize,
"? " => 48usize,
"from" => 94usize
},
phf_map! { /* 89 */
"INT" => 10usize,
"FLOAT" => 36usize,
"while" => 44usize,
"not " => 54usize,
"-" => 98usize,
"+-" => 26usize,
"+" => 96usize,
"{" => 24usize,
"thru" => 30usize,
"next" => 28usize,
"step" => 92usize,
"? " => 48usize,
"unless" => 12usize,
"''" => 20usize,
"(" => 80usize,
"if" => 22usize,
"in" => 46usize,
"?" => 32usize,
"'" => 88usize,
"?? " => 74usize,
"ID" => 8usize,
"|" => 18usize,
"#pm#" => 86usize,
"[" => 40usize,
"not" => 2usize,
"from" => 94usize,
"UNARY_RECIP" => 76usize,
"do" => 85usize,
"BOOL" => 34usize,
"STRING" => 60usize,
"for" => 42usize
},
phf_map! { /* 90 */
"''" => 20usize,
"+-" => 26usize,
"?? " => 74usize,
"{" => 24usize,
"in" => 46usize,
"BOOL" => 34usize,
"not " => 54usize,
"#pm#" => 86usize,
"FLOAT" => 36usize,
"|" => 18usize,
"-" => 98usize,
"[" => 40usize,
"unless" => 12usize,
"not" => 2usize,
"+" => 96usize,
"thru" => 30usize,
"next" => 28usize,
"(" => 80usize,
"INT" => 10usize,
"from" => 94usize,
"for" => 42usize,
"?" => 32usize,
"'" => 88usize,
"UNARY_RECIP" => 76usize,
"STRING" => 60usize,
"while" => 44usize,
"ID" => 8usize,
"? " => 48usize,
"if" => 22usize,
"step" => 92usize,
"do" => 85usize
},
phf_map! { /* 91 */
"?" => 32usize,
"|" => 18usize,
"if" => 22usize,
"'" => 88usize,
"+" => 96usize,
"+-" => 26usize,
"BOOL" => 34usize,
"for" => 42usize,
"? " => 48usize,
"FLOAT" => 36usize,
"not " => 54usize,
"{" => 24usize,
"UNARY_RECIP" => 76usize,
"-" => 98usize,
"next" => 28usize,
"(" => 80usize,
"?? " => 74usize,
"thru" => 30usize,
"ID" => 8usize,
"do" => 85usize,
"''" => 20usize,
"INT" => 10usize,
"not" => 2usize,
"unless" => 12usize,
"in" => 46usize,
"step" => 92usize,
"from" => 94usize,
"[" => 40usize,
"STRING" => 60usize,
"#pm#" => 86usize,
"while" => 44usize
},
phf_map! { /* 92 */
"while" => 44usize,
"ID" => 8usize,
"not " => 54usize,
"FLOAT" => 36usize,
"STRING" => 60usize,
"?? " => 74usize,
"+" => 96usize,
"for" => 42usize,
"thru" => 30usize,
"next" => 28usize,
"in" => 46usize,
"do" => 85usize,
"#pm#" => 86usize,
"unless" => 12usize,
"if" => 22usize,
"{" => 24usize,
"[" => 40usize,
"|" => 18usize,
"from" => 94usize,
"step" => 92usize,
"(" => 80usize,
"-" => 98usize,
"'" => 88usize,
"BOOL" => 34usize,
"+-" => 26usize,
"not" => 2usize,
"? " => 48usize,
"INT" => 10usize,
"''" => 20usize,
"UNARY_RECIP" => 76usize,
"?" => 32usize
},
phf_map! { /* 93 */
"in" => 46usize,
"BOOL" => 34usize,
"while" => 44usize,
"not" => 2usize,
"-" => 98usize,
"for" => 42usize,
"[" => 40usize,
"UNARY_RECIP" => 76usize,
"INT" => 10usize,
"FLOAT" => 36usize,
"from" => 94usize,
"ID" => 8usize,
"unless" => 12usize,
"(" => 80usize,
"{" => 24usize,
"do" => 85usize,
"+" => 96usize,
"thru" => 30usize,
"? " => 48usize,
"'" => 88usize,
"?? " => 74usize,
"+-" => 26usize,
"not " => 54usize,
"''" => 20usize,
"#pm#" => 86usize,
"?" => 32usize,
"if" => 22usize,
"|" => 18usize,
"next" => 28usize,
"step" => 92usize,
"STRING" => 60usize
},
phf_map! { /* 94 */
"for" => 42usize,
"+" => 96usize,
"'" => 88usize,
"step" => 92usize,
"thru" => 30usize,
"BOOL" => 34usize,
"FLOAT" => 36usize,
"ID" => 8usize,
"[" => 40usize,
"#pm#" => 86usize,
"''" => 20usize,
"(" => 80usize,
"+-" => 26usize,
"if" => 22usize,
"?" => 32usize,
"from" => 94usize,
"UNARY_RECIP" => 76usize,
"in" => 46usize,
"not" => 2usize,
"? " => 48usize,
"?? " => 74usize,
"{" => 24usize,
"INT" => 10usize,
"-" => 98usize,
"while" => 44usize,
"unless" => 12usize,
"not " => 54usize,
"next" => 28usize,
"|" => 18usize,
"STRING" => 60usize,
"do" => 85usize
},
phf_map! { /* 95 */
"+-" => 26usize,
"if" => 22usize,
"FLOAT" => 36usize,
"BOOL" => 34usize,
"do" => 85usize,
"UNARY_RECIP" => 76usize,
"from" => 94usize,
"#pm#" => 86usize,
"next" => 28usize,
"-" => 98usize,
"ID" => 8usize,
"in" => 46usize,
"?? " => 74usize,
"for" => 42usize,
"not" => 2usize,
"[" => 40usize,
"step" => 92usize,
"not " => 54usize,
"'" => 88usize,
"unless" => 12usize,
"+" => 96usize,
"(" => 80usize,
"|" => 18usize,
"? " => 48usize,
"''" => 20usize,
"INT" => 10usize,
"while" => 44usize,
"thru" => 30usize,
"{" => 24usize,
"?" => 32usize,
"STRING" => 60usize
},
phf_map! { /* 96 */
"ID" => 8usize,
"#pm#" => 86usize,
"not " => 54usize,
"in" => 46usize,
"[" => 40usize,
"INT" => 10usize,
"while" => 44usize,
"-" => 98usize,
"if" => 22usize,
"? " => 48usize,
"{" => 24usize,
"(" => 80usize,
"from" => 94usize,
"step" => 92usize,
"thru" => 30usize,
"do" => 85usize,
"+" => 96usize,
"UNARY_RECIP" => 76usize,
"not" => 2usize,
"|" => 18usize,
"BOOL" => 34usize,
"unless" => 12usize,
"'" => 88usize,
"?" => 32usize,
"FLOAT" => 36usize,
"STRING" => 60usize,
"+-" => 26usize,
"next" => 28usize,
"''" => 20usize,
"?? " => 74usize,
"for" => 42usize
},
phf_map! { /* 97 */
"LIST_SEP" => 137usize,
"^^" => 137usize,
"STACKpmOPT" => 137usize,
":" => 137usize,
"<=" => 137usize,
"for" => 137usize,
"unless" => 137usize,
"+-" => 137usize,
"\0" => 137usize,
"**" => 137usize,
"}" => 137usize,
"#pm#" => 137usize,
"step" => 137usize,
"!" => 137usize,
"]" => 137usize,
"/" => 137usize,
"!!" => 137usize,
"." => 137usize,
"*" => 137usize,
":=" => 137usize,
"nounand" => 137usize,
"::=" => 137usize,
">=" => 137usize,
"-" => 137usize,
"or" => 137usize,
"|" => 137usize,
"noundiv" => 137usize,
"+" => 137usize,
"while" => 137usize,
"else" => 137usize,
"::" => 137usize,
"in" => 137usize,
"then" => 137usize,
"END_TOKEN" => 137usize,
"next" => 137usize,
"blankmult" => 137usize,
"nounsub" => 137usize,
"^" => 137usize,
"nounpow" => 137usize,
"do" => 137usize,
"nounadd" => 137usize,
"and" => 137usize,
")" => 137usize,
"~" => 137usize,
"elseif" => 137usize,
"from" => 137usize,
"#" => 137usize,
"thru" => 137usize,
"=" => 137usize,
">" => 137usize,
"<" => 137usize,
"nouneq" => 137usize,
"nounor" => 137usize
},
phf_map! { /* 98 */
"unless" => 12usize,
"for" => 42usize,
"if" => 22usize,
"+" => 96usize,
"FLOAT" => 36usize,
"(" => 80usize,
"INT" => 10usize,
"|" => 18usize,
"UNARY_RECIP" => 76usize,
"not" => 2usize,
"'" => 88usize,
"? " => 48usize,
"''" => 20usize,
"STRING" => 60usize,
"from" => 94usize,
"{" => 24usize,
"?? " => 74usize,
"thru" => 30usize,
"?" => 32usize,
"not " => 54usize,
"do" => 85usize,
"step" => 92usize,
"+-" => 26usize,
"[" => 40usize,
"#pm#" => 86usize,
"while" => 44usize,
"-" => 98usize,
"BOOL" => 34usize,
"ID" => 8usize,
"in" => 46usize,
"next" => 28usize
},
phf_map! { /* 99 */
"BOOL" => 34usize,
"? " => 48usize,
"next" => 28usize,
"for" => 42usize,
"step" => 92usize,
"not " => 54usize,
"ID" => 8usize,
"''" => 20usize,
"+-" => 26usize,
"not" => 2usize,
"|" => 18usize,
"unless" => 12usize,
"FLOAT" => 36usize,
"?" => 32usize,
"while" => 44usize,
"#pm#" => 86usize,
"thru" => 30usize,
"+" => 96usize,
"UNARY_RECIP" => 76usize,
"from" => 94usize,
"do" => 85usize,
"'" => 88usize,
"(" => 80usize,
"?? " => 74usize,
"STRING" => 60usize,
"-" => 98usize,
"in" => 46usize,
"[" => 40usize,
"INT" => 10usize,
"if" => 22usize,
"{" => 24usize
},
phf_map! { /* 100 */
"from" => 94usize,
"FLOAT" => 36usize,
"|" => 18usize,
"(" => 80usize,
"[" => 40usize,
"while" => 44usize,
"unless" => 12usize,
"in" => 46usize,
"+-" => 26usize,
"'" => 88usize,
"BOOL" => 34usize,
"#pm#" => 86usize,
"? " => 48usize,
"STRING" => 60usize,
"+" => 96usize,
"step" => 92usize,
"?? " => 74usize,
"do" => 85usize,
"-" => 98usize,
"UNARY_RECIP" => 76usize,
"INT" => 10usize,
"{" => 24usize,
"next" => 28usize,
"?" => 32usize,
"''" => 20usize,
"if" => 22usize,
"thru" => 30usize,
"for" => 42usize,
"not " => 54usize,
"ID" => 8usize,
"not" => 2usize
},
phf_map! { /* 101 */
"unless" => 12usize,
"(" => 80usize,
"not" => 2usize,
"|" => 18usize,
"not " => 54usize,
"-" => 98usize,
"ID" => 8usize,
"INT" => 10usize,
"+" => 96usize,
"'" => 88usize,
"if" => 22usize,
"''" => 20usize,
"for" => 42usize,
"next" => 28usize,
"+-" => 26usize,
"#pm#" => 86usize,
"in" => 46usize,
"thru" => 30usize,
"FLOAT" => 36usize,
"UNARY_RECIP" => 76usize,
"[" => 40usize,
"STRING" => 60usize,
"step" => 92usize,
"BOOL" => 34usize,
"? " => 48usize,
"?" => 32usize,
"?? " => 74usize,
"{" => 24usize,
"while" => 44usize,
"from" => 94usize,
"do" => 85usize
},
phf_map! { /* 102 */
"?" => 32usize,
"INT" => 10usize,
"if" => 22usize,
"unless" => 12usize,
"ID" => 8usize,
"from" => 94usize,
"in" => 46usize,
"while" => 44usize,
"''" => 20usize,
"[" => 40usize,
"next" => 28usize,
"?? " => 74usize,
"step" => 92usize,
"-" => 98usize,
"+-" => 26usize,
"? " => 48usize,
"BOOL" => 34usize,
"do" => 85usize,
"'" => 88usize,
"STRING" => 60usize,
"not" => 2usize,
"UNARY_RECIP" => 76usize,
"#pm#" => 86usize,
"for" => 42usize,
"(" => 80usize,
"+" => 96usize,
"FLOAT" => 36usize,
"|" => 18usize,
"not " => 54usize,
"thru" => 30usize,
"{" => 24usize
},
phf_map! { /* 103 */
"while" => 44usize,
"''" => 20usize,
"|" => 18usize,
"+" => 96usize,
"UNARY_RECIP" => 76usize,
"STRING" => 60usize,
"+-" => 26usize,
"from" => 94usize,
"unless" => 12usize,
"-" => 98usize,
"? " => 48usize,
"not " => 54usize,
"(" => 80usize,
"BOOL" => 34usize,
"thru" => 30usize,
"not" => 2usize,
"[" => 40usize,
"?" => 32usize,
"step" => 92usize,
"{" => 24usize,
"'" => 88usize,
"do" => 85usize,
"ID" => 8usize,
"#pm#" => 86usize,
"?? " => 74usize,
"for" => 42usize,
"next" => 28usize,
"if" => 22usize,
"in" => 46usize,
"FLOAT" => 36usize,
"INT" => 10usize
},
phf_map! { /* 104 */
"-" => 98usize,
"ID" => 8usize,
"+-" => 26usize,
"thru" => 30usize,
"+" => 96usize,
"not" => 2usize,
"{" => 24usize,
"FLOAT" => 36usize,
"?? " => 74usize,
"#pm#" => 86usize,
"UNARY_RECIP" => 76usize,
"unless" => 12usize,
"from" => 94usize,
"?" => 32usize,
"(" => 80usize,
"STRING" => 60usize,
"''" => 20usize,
"do" => 85usize,
"step" => 92usize,
"if" => 22usize,
"next" => 28usize,
"[" => 40usize,
"INT" => 10usize,
"while" => 44usize,
"|" => 18usize,
"in" => 46usize,
"? " => 48usize,
"'" => 88usize,
"for" => 42usize,
"not " => 54usize,
"BOOL" => 34usize
},
phf_map! { /* 105 */
"|" => 18usize,
"-" => 98usize,
"do" => 85usize,
"not " => 54usize,
"in" => 46usize,
"{" => 24usize,
"thru" => 30usize,
"from" => 94usize,
"BOOL" => 34usize,
"next" => 28usize,
"INT" => 10usize,
"+" => 96usize,
"?" => 32usize,
"[" => 40usize,
"STRING" => 60usize,
"(" => 80usize,
"''" => 20usize,
"step" => 92usize,
"#pm#" => 86usize,
"FLOAT" => 36usize,
"unless" => 12usize,
"?? " => 74usize,
"for" => 42usize,
"+-" => 26usize,
"ID" => 8usize,
"if" => 22usize,
"while" => 44usize,
"'" => 88usize,
"not" => 2usize,
"UNARY_RECIP" => 76usize,
"? " => 48usize
},
phf_map! { /* 106 */
"? " => 48usize,
"unless" => 12usize,
"+" => 96usize,
"''" => 20usize,
"+-" => 26usize,
"?" => 32usize,
"'" => 88usize,
"[" => 40usize,
"(" => 80usize,
"UNARY_RECIP" => 76usize,
"INT" => 10usize,
"if" => 22usize,
"for" => 42usize,
"in" => 46usize,
"STRING" => 60usize,
"while" => 44usize,
"thru" => 30usize,
"-" => 98usize,
"FLOAT" => 36usize,
"not" => 2usize,
"{" => 24usize,
"#pm#" => 86usize,
"|" => 18usize,
"from" => 94usize,
"not " => 54usize,
"ID" => 8usize,
"?? " => 74usize,
"BOOL" => 34usize,
"next" => 28usize,
"do" => 85usize,
"step" => 92usize
},
phf_map! { /* 107 */
"not" => 2usize,
"INT" => 10usize,
"thru" => 30usize,
"#pm#" => 86usize,
"{" => 24usize,
"STRING" => 60usize,
"ID" => 8usize,
"while" => 44usize,
"? " => 48usize,
"FLOAT" => 36usize,
"next" => 28usize,
"?" => 32usize,
"do" => 85usize,
"+" => 96usize,
"-" => 98usize,
"UNARY_RECIP" => 76usize,
"'" => 88usize,
"+-" => 26usize,
"unless" => 12usize,
"for" => 42usize,
"?? " => 74usize,
"|" => 18usize,
"''" => 20usize,
"from" => 94usize,
"BOOL" => 34usize,
"(" => 80usize,
"step" => 92usize,
"in" => 46usize,
"if" => 22usize,
"not " => 54usize,
"[" => 40usize
},
phf_map! { /* 108 */
"-" => 98usize,
"while" => 44usize,
"? " => 48usize,
"''" => 20usize,
"?" => 32usize,
"|" => 18usize,
"ID" => 8usize,
"UNARY_RECIP" => 76usize,
"'" => 88usize,
"thru" => 30usize,
"INT" => 10usize,
"#pm#" => 86usize,
"{" => 24usize,
"BOOL" => 34usize,
"[" => 40usize,
"not" => 2usize,
"STRING" => 60usize,
"next" => 28usize,
"for" => 42usize,
"from" => 94usize,
"not " => 54usize,
"+" => 96usize,
"unless" => 12usize,
"+-" => 26usize,
"(" => 80usize,
"in" => 46usize,
"if" => 22usize,
"do" => 85usize,
"?? " => 74usize,
"step" => 92usize,
"FLOAT" => 36usize
},
phf_map! { /* 109 */
"(" => 80usize,
"INT" => 10usize,
"-" => 98usize,
"'" => 88usize,
"? " => 48usize,
"#pm#" => 86usize,
"FLOAT" => 36usize,
"BOOL" => 34usize,
"unless" => 12usize,
"?" => 32usize,
"in" => 46usize,
"for" => 42usize,
"|" => 18usize,
"step" => 92usize,
"next" => 28usize,
"not" => 2usize,
"STRING" => 60usize,
"from" => 94usize,
"[" => 40usize,
"ID" => 8usize,
"do" => 85usize,
"''" => 20usize,
"thru" => 30usize,
"not " => 54usize,
"?? " => 74usize,
"while" => 44usize,
"UNARY_RECIP" => 76usize,
"+-" => 26usize,
"{" => 24usize,
"if" => 22usize,
"+" => 96usize
},
phf_map! { /* 110 */
"+" => 96usize,
"next" => 28usize,
"unless" => 12usize,
"(" => 80usize,
"-" => 98usize,
"in" => 46usize,
"ID" => 8usize,
"[" => 40usize,
"BOOL" => 34usize,
"step" => 92usize,
"UNARY_RECIP" => 76usize,
"from" => 94usize,
"|" => 18usize,
"STRING" => 60usize,
"if" => 22usize,
"{" => 24usize,
"''" => 20usize,
"do" => 85usize,
"thru" => 30usize,
"while" => 44usize,
"? " => 48usize,
"INT" => 10usize,
"not" => 2usize,
"?" => 32usize,
"#pm#" => 86usize,
"'" => 88usize,
"FLOAT" => 36usize,
"not " => 54usize,
"?? " => 74usize,
"for" => 42usize,
"+-" => 26usize
},
phf_map! { /* 111 */
"else" => 139usize,
"-" => 139usize,
"or" => 139usize,
"while" => 139usize,
"nounpow" => 139usize,
"::" => 139usize,
"for" => 139usize,
"nounadd" => 139usize,
":" => 139usize,
"nounor" => 139usize,
"do" => 139usize,
"#" => 139usize,
"**" => 139usize,
"<" => 139usize,
"blankmult" => 139usize,
"nounsub" => 139usize,
"nounand" => 139usize,
"next" => 139usize,
"from" => 139usize,
"thru" => 139usize,
"^" => 139usize,
":=" => 139usize,
"}" => 139usize,
"/" => 139usize,
"+" => 139usize,
"." => 139usize,
"<=" => 139usize,
"elseif" => 139usize,
">" => 139usize,
"::=" => 139usize,
"END_TOKEN" => 139usize,
"^^" => 139usize,
"!" => 139usize,
"step" => 139usize,
"nouneq" => 139usize,
">=" => 139usize,
"]" => 139usize,
"+-" => 139usize,
"and" => 139usize,
"in" => 139usize,
"*" => 139usize,
"STACKpmOPT" => 139usize,
"then" => 139usize,
"~" => 139usize,
"\0" => 139usize,
"|" => 139usize,
"#pm#" => 139usize,
")" => 139usize,
"noundiv" => 139usize,
"LIST_SEP" => 139usize,
"!!" => 139usize,
"unless" => 139usize,
"=" => 139usize
},
phf_map! { /* 112 */
"'" => 88usize,
"?" => 32usize,
"not " => 54usize,
"-" => 98usize,
"in" => 46usize,
"BOOL" => 34usize,
"STRING" => 60usize,
"while" => 44usize,
"[" => 40usize,
"UNARY_RECIP" => 76usize,
"step" => 92usize,
"ID" => 8usize,
"(" => 80usize,
"next" => 28usize,
"+" => 96usize,
"#pm#" => 86usize,
"? " => 48usize,
"|" => 18usize,
"{" => 24usize,
"thru" => 30usize,
"for" => 42usize,
"+-" => 26usize,
"if" => 22usize,
"''" => 20usize,
"unless" => 12usize,
"from" => 94usize,
"FLOAT" => 36usize,
"do" => 85usize,
"not" => 2usize,
"INT" => 10usize,
"?? " => 74usize
},
phf_map! { /* 113 */
"in" => 46usize,
"not " => 54usize,
"UNARY_RECIP" => 76usize,
"thru" => 30usize,
"(" => 80usize,
"INT" => 10usize,
"|" => 18usize,
"'" => 88usize,
"from" => 94usize,
"BOOL" => 34usize,
"do" => 85usize,
"?" => 32usize,
"unless" => 12usize,
"ID" => 8usize,
"#pm#" => 86usize,
"+" => 96usize,
"step" => 92usize,
"? " => 48usize,
"if" => 22usize,
"not" => 2usize,
"''" => 20usize,
"{" => 24usize,
"FLOAT" => 36usize,
"+-" => 26usize,
"while" => 44usize,
"next" => 28usize,
"for" => 42usize,
"STRING" => 60usize,
"-" => 98usize,
"?? " => 74usize,
"[" => 40usize
},
phf_map! { /* 114 */
"for" => 91usize,
"unless" => 91usize,
"from" => 91usize,
"in" => 91usize,
"step" => 91usize,
"thru" => 91usize,
"do" => 91usize,
"while" => 91usize,
"next" => 91usize
},
phf_map! { /* 115 */
"step" => 89usize,
"in" => 89usize,
"unless" => 89usize,
"from" => 89usize,
"next" => 89usize,
"while" => 89usize,
"for" => 89usize,
"thru" => 89usize,
"do" => 89usize
},
phf_map! { /* 116 */
"step" => 115usize,
"}" => 115usize,
"^^" => 174usize,
"while" => 115usize,
"unless" => 115usize,
"then" => 115usize,
"|" => 115usize,
"else" => 115usize,
"END_TOKEN" => 115usize,
"nounand" => 196usize,
"=" => 115usize,
"]" => 115usize,
"blankmult" => 226usize,
"!" => 194usize,
"~" => 218usize,
"LIST_SEP" => 115usize,
"nounadd" => 188usize,
"+-" => 115usize,
"for" => 115usize,
"elseif" => 115usize,
"nounsub" => 190usize,
"or" => 224usize,
"-" => 214usize,
":=" => 115usize,
":" => 115usize,
"thru" => 115usize,
"+" => 160usize,
"from" => 115usize,
"in" => 115usize,
"next" => 115usize,
"#pm#" => 115usize,
"^" => 168usize,
"do" => 115usize,
"<=" => 115usize,
"::" => 115usize,
"#" => 115usize,
"nounpow" => 180usize,
"STACKpmOPT" => 115usize,
"::=" => 115usize,
"\0" => 115usize,
"noundiv" => 202usize,
">=" => 115usize,
">" => 115usize,
"<" => 115usize,
"/" => 172usize,
"nouneq" => 115usize,
"nounor" => 162usize,
")" => 115usize,
"*" => 210usize,
"**" => 220usize,
"." => 204usize,
"!!" => 222usize,
"and" => 164usize
},
phf_map! { /* 117 */
"/" => 172usize,
"!!" => 222usize,
"!" => 194usize,
"END_TOKEN" => 113usize,
"::=" => 113usize,
">" => 113usize,
"<" => 113usize,
"thru" => 113usize,
"nounand" => 196usize,
"+-" => 113usize,
"**" => 220usize,
"next" => 113usize,
"nouneq" => 113usize,
"::" => 113usize,
"noundiv" => 202usize,
"^" => 168usize,
"#pm#" => 113usize,
"LIST_SEP" => 113usize,
"+" => 113usize,
"#" => 113usize,
":" => 113usize,
"|" => 113usize,
"nounsub" => 113usize,
"and" => 164usize,
":=" => 113usize,
">=" => 113usize,
"nounpow" => 180usize,
"<=" => 113usize,
")" => 113usize,
"blankmult" => 226usize,
"}" => 113usize,
"in" => 113usize,
"\0" => 113usize,
"else" => 113usize,
"for" => 113usize,
"step" => 113usize,
"~" => 218usize,
"from" => 113usize,
"=" => 113usize,
"do" => 113usize,
"]" => 113usize,
"while" => 113usize,
"*" => 210usize,
"nounadd" => 113usize,
"." => 204usize,
"elseif" => 113usize,
"nounor" => 162usize,
"STACKpmOPT" => 113usize,
"then" => 113usize,
"unless" => 113usize,
"^^" => 174usize,
"or" => 224usize,
"-" => 113usize
},
phf_map! { /* 118 */
"~" => 81usize,
">=" => 81usize,
"/" => 81usize,
")" => 81usize,
"nounsub" => 81usize,
":" => 81usize,
"blankmult" => 81usize,
"\0" => 81usize,
"noundiv" => 81usize,
"else" => 81usize,
"nounadd" => 81usize,
"from" => 81usize,
"for" => 81usize,
"}" => 81usize,
"-" => 81usize,
"nounand" => 81usize,
"nouneq" => 81usize,
"in" => 81usize,
"|" => 81usize,
"*" => 81usize,
"!" => 81usize,
"unless" => 81usize,
"<=" => 81usize,
"<" => 81usize,
"elseif" => 81usize,
"do" => 81usize,
"next" => 81usize,
"nounor" => 81usize,
"thru" => 81usize,
"]" => 81usize,
"nounpow" => 81usize,
"then" => 81usize,
":=" => 81usize,
"=" => 81usize,
"STACKpmOPT" => 81usize,
"!!" => 81usize,
"and" => 81usize,
"." => 81usize,
"::" => 81usize,
"+-" => 81usize,
"^" => 81usize,
"step" => 81usize,
"::=" => 81usize,
">" => 81usize,
"END_TOKEN" => 81usize,
"**" => 81usize,
"^^" => 81usize,
"LIST_SEP" => 81usize,
"#" => 81usize,
"+" => 81usize,
"while" => 81usize,
"#pm#" => 81usize,
"or" => 81usize
},
phf_map! { /* 119 */
"<" => 205usize,
"LIST_SEP" => 205usize,
"nounsub" => 205usize,
"<=" => 205usize,
"for" => 205usize,
"::=" => 205usize,
"from" => 205usize,
"]" => 205usize,
"in" => 205usize,
"nounpow" => 205usize,
"*" => 205usize,
")" => 205usize,
"!" => 205usize,
"nounor" => 205usize,
"nouneq" => 205usize,
"^^" => 205usize,
"+" => 205usize,
"#" => 205usize,
"STACKpmOPT" => 205usize,
"+-" => 205usize,
"**" => 205usize,
"and" => 205usize,
"thru" => 205usize,
"~" => 205usize,
"\0" => 205usize,
"=" => 205usize,
"." => 205usize,
"do" => 205usize,
"or" => 205usize,
"END_TOKEN" => 205usize,
"!!" => 205usize,
"nounand" => 205usize,
":" => 205usize,
"noundiv" => 205usize,
"::" => 205usize,
"elseif" => 205usize,
"then" => 205usize,
"unless" => 205usize,
">" => 205usize,
"else" => 205usize,
"}" => 205usize,
":=" => 205usize,
"/" => 205usize,
"step" => 205usize,
">=" => 205usize,
"-" => 205usize,
"#pm#" => 205usize,
"^" => 205usize,
"blankmult" => 205usize,
"next" => 205usize,
"while" => 205usize,
"nounadd" => 205usize,
"|" => 205usize
},
phf_map! { /* 120 */
"'" => 88usize,
"-" => 98usize,
"? " => 48usize,
"not " => 54usize,
"+-" => 26usize,
"FLOAT" => 36usize,
"?? " => 74usize,
"in" => 46usize,
"''" => 20usize,
"if" => 22usize,
"+" => 96usize,
"for" => 42usize,
"while" => 44usize,
"BOOL" => 34usize,
"|" => 18usize,
"next" => 28usize,
"?" => 32usize,
"[" => 40usize,
"STRING" => 60usize,
"not" => 2usize,
"ID" => 8usize,
"from" => 94usize,
"thru" => 30usize,
"unless" => 12usize,
"UNARY_RECIP" => 76usize,
"INT" => 10usize,
"do" => 85usize,
"#pm#" => 86usize,
"step" => 92usize,
"{" => 24usize,
"(" => 80usize
},
phf_map! { /* 121 */
"}" => 29usize,
")" => 29usize,
"]" => 29usize
},
phf_map! { /* 122 */
"{" => 24usize,
"[" => 40usize,
"? " => 48usize,
"step" => 92usize,
"UNARY_RECIP" => 76usize,
"thru" => 30usize,
"FLOAT" => 36usize,
"+" => 96usize,
"?? " => 74usize,
"not " => 54usize,
"(" => 80usize,
"not" => 2usize,
"?" => 32usize,
"for" => 42usize,
"unless" => 12usize,
"in" => 46usize,
"do" => 85usize,
"ID" => 8usize,
"next" => 28usize,
"|" => 18usize,
"BOOL" => 34usize,
"STRING" => 60usize,
"INT" => 10usize,
"from" => 94usize,
"#pm#" => 86usize,
"if" => 22usize,
"-" => 98usize,
"'" => 88usize,
"+-" => 26usize,
"''" => 20usize,
"while" => 44usize
},
phf_map! { /* 123 */
"<" => 25usize,
"]" => 25usize,
"[" => 25usize,
"or" => 25usize,
"::" => 25usize,
"<=" => 25usize,
"::=" => 25usize,
"=" => 25usize,
"\0" => 25usize,
"~" => 25usize,
"blankmult" => 25usize,
"unless" => 25usize,
"LIST_SEP" => 25usize,
":" => 25usize,
"}" => 25usize,
"|" => 25usize,
"nounadd" => 25usize,
"-" => 25usize,
"from" => 25usize,
"for" => 25usize,
"nounor" => 25usize,
"step" => 25usize,
"!" => 25usize,
"^^" => 25usize,
"and" => 25usize,
"else" => 25usize,
"next" => 25usize,
">" => 25usize,
"/" => 25usize,
"STACKpmOPT" => 25usize,
"thru" => 25usize,
"nounsub" => 25usize,
"nounand" => 25usize,
"#" => 25usize,
"(" => 25usize,
"**" => 25usize,
">=" => 25usize,
"!!" => 25usize,
"." => 25usize,
"#pm#" => 25usize,
"elseif" => 25usize,
"END_TOKEN" => 25usize,
"in" => 25usize,
"+-" => 25usize,
"while" => 25usize,
"nounpow" => 25usize,
"noundiv" => 25usize,
")" => 25usize,
"do" => 25usize,
"nouneq" => 25usize,
":=" => 25usize,
"^" => 25usize,
"then" => 25usize,
"+" => 25usize,
"*" => 25usize
},
phf_map! { /* 124 */
"<" => 23usize,
"/" => 23usize,
"else" => 23usize,
"~" => 23usize,
"::" => 23usize,
"nounor" => 23usize,
"<=" => 23usize,
"LIST_SEP" => 23usize,
"nouneq" => 23usize,
"or" => 23usize,
"." => 23usize,
"^^" => 23usize,
"and" => 23usize,
"}" => 23usize,
"nounadd" => 23usize,
"elseif" => 23usize,
"noundiv" => 23usize,
"for" => 23usize,
"while" => 23usize,
"blankmult" => 23usize,
"|" => 23usize,
"thru" => 23usize,
":=" => 23usize,
"unless" => 23usize,
"::=" => 23usize,
"!!" => 23usize,
"+" => 23usize,
":" => 23usize,
"nounand" => 23usize,
"^" => 23usize,
")" => 23usize,
"do" => 23usize,
"-" => 23usize,
"in" => 23usize,
"=" => 23usize,
"STACKpmOPT" => 23usize,
"then" => 23usize,
"\0" => 23usize,
"!" => 23usize,
"next" => 23usize,
"(" => 23usize,
"[" => 23usize,
">" => 23usize,
"from" => 23usize,
"#" => 23usize,
">=" => 23usize,
"**" => 23usize,
"+-" => 23usize,
"]" => 23usize,
"#pm#" => 23usize,
"nounsub" => 23usize,
"nounpow" => 23usize,
"*" => 23usize,
"END_TOKEN" => 23usize,
"step" => 23usize
},
phf_map! { /* 125 */
"nounor" => 65usize,
"::" => 65usize,
"noundiv" => 65usize,
">=" => 65usize,
">" => 65usize,
"]" => 65usize,
"nounadd" => 65usize,
"blankmult" => 65usize,
"END_TOKEN" => 65usize,
"do" => 65usize,
"nouneq" => 65usize,
"and" => 65usize,
"or" => 65usize,
"^" => 65usize,
"in" => 65usize,
"<=" => 65usize,
"+-" => 65usize,
"." => 65usize,
"then" => 65usize,
"^^" => 65usize,
"for" => 65usize,
"<" => 65usize,
")" => 65usize,
"elseif" => 65usize,
"nounand" => 65usize,
"nounsub" => 65usize,
"}" => 65usize,
"!!" => 65usize,
"~" => 65usize,
"\0" => 65usize,
"!" => 65usize,
"from" => 65usize,
":" => 65usize,
"::=" => 65usize,
"#" => 65usize,
"*" => 65usize,
"nounpow" => 65usize,
"=" => 65usize,
":=" => 65usize,
"STACKpmOPT" => 65usize,
"unless" => 65usize,
"thru" => 65usize,
"LIST_SEP" => 65usize,
"/" => 65usize,
"-" => 65usize,
"else" => 65usize,
"#pm#" => 65usize,
"while" => 65usize,
"next" => 65usize,
"**" => 65usize,
"+" => 65usize,
"|" => 65usize,
"step" => 65usize
},
phf_map! { /* 126 */
"noundiv" => 61usize,
"#pm#" => 61usize,
"**" => 61usize,
"-" => 61usize,
"<=" => 61usize,
"*" => 61usize,
"for" => 61usize,
"+-" => 61usize,
"!" => 61usize,
"STACKpmOPT" => 61usize,
"<" => 61usize,
"^" => 61usize,
"step" => 61usize,
"}" => 61usize,
"END_TOKEN" => 61usize,
")" => 61usize,
"elseif" => 61usize,
"=" => 61usize,
"thru" => 61usize,
":" => 61usize,
"unless" => 61usize,
"^^" => 61usize,
"nounor" => 61usize,
"or" => 61usize,
"]" => 61usize,
"do" => 61usize,
"#" => 61usize,
"nounpow" => 61usize,
"nounadd" => 61usize,
"while" => 61usize,
"in" => 61usize,
"+" => 61usize,
"nounand" => 61usize,
"nounsub" => 61usize,
"and" => 61usize,
"blankmult" => 61usize,
"~" => 61usize,
"|" => 61usize,
">=" => 61usize,
"next" => 61usize,
"::" => 61usize,
"LIST_SEP" => 61usize,
"::=" => 61usize,
"from" => 61usize,
"!!" => 61usize,
":=" => 61usize,
"nouneq" => 61usize,
"." => 61usize,
"\0" => 61usize,
"/" => 61usize,
">" => 61usize,
"else" => 61usize,
"then" => 61usize
},
phf_map! { /* 127 */
"\0" => 7usize
},
phf_map! { /* 128 */
"step" => 92usize,
"''" => 20usize,
"[" => 40usize,
"ID" => 8usize,
"? " => 48usize,
"\0" => 13usize,
"?? " => 74usize,
"{" => 24usize,
"+-" => 26usize,
"BOOL" => 34usize,
"while" => 44usize,
"?" => 32usize,
"not" => 2usize,
"not " => 54usize,
"STRING" => 60usize,
"#pm#" => 86usize,
"in" => 46usize,
"-" => 98usize,
"if" => 22usize,
"from" => 94usize,
"'" => 88usize,
"do" => 85usize,
"|" => 18usize,
"for" => 42usize,
"UNARY_RECIP" => 76usize,
"+" => 96usize,
"next" => 28usize,
"(" => 80usize,
"thru" => 30usize,
"FLOAT" => 36usize,
"INT" => 10usize,
"unless" => 12usize
},
phf_map! { /* 129 */
"LIST_SEP" => 148usize,
":" => 334usize,
"=" => 332usize,
"END_TOKEN" => 21usize,
"\0" => 21usize
},
phf_map! { /* 130 */
"." => 27usize,
"elseif" => 27usize,
"^^" => 27usize,
"while" => 27usize,
"+-" => 27usize,
"*" => 27usize,
"blankmult" => 27usize,
"::" => 27usize,
"unless" => 27usize,
"#pm#" => 27usize,
"LIST_SEP" => 27usize,
"do" => 27usize,
"!!" => 27usize,
"or" => 27usize,
"from" => 27usize,
":" => 27usize,
"(" => 27usize,
">=" => 27usize,
")" => 27usize,
"]" => 27usize,
"=" => 27usize,
"next" => 27usize,
"step" => 27usize,
"+" => 27usize,
"then" => 27usize,
"\0" => 27usize,
"nounsub" => 27usize,
"-" => 27usize,
"thru" => 27usize,
"nounor" => 27usize,
"for" => 27usize,
"<=" => 27usize,
"END_TOKEN" => 27usize,
"nounpow" => 27usize,
"}" => 27usize,
"STACKpmOPT" => 27usize,
"nouneq" => 27usize,
"/" => 27usize,
"nounadd" => 27usize,
"[" => 27usize,
"::=" => 27usize,
":=" => 27usize,
"else" => 27usize,
"**" => 27usize,
"and" => 27usize,
"<" => 27usize,
"!" => 27usize,
"^" => 27usize,
"|" => 27usize,
">" => 27usize,
"#" => 27usize,
"~" => 27usize,
"in" => 27usize,
"noundiv" => 27usize,
"nounand" => 27usize
},
phf_map! { /* 131 */
"nounpow" => 180usize,
"::" => 159usize,
"unless" => 159usize,
"!" => 194usize,
"for" => 159usize,
"]" => 159usize,
"/" => 172usize,
"+" => 160usize,
"or" => 224usize,
"step" => 159usize,
"~" => 218usize,
"=" => 159usize,
"nounsub" => 190usize,
"blankmult" => 226usize,
":" => 159usize,
"#pm#" => 159usize,
"**" => 220usize,
"!!" => 222usize,
"|" => 159usize,
"#" => 159usize,
"::=" => 159usize,
"+-" => 159usize,
"*" => 210usize,
"STACKpmOPT" => 159usize,
"in" => 159usize,
"END_TOKEN" => 159usize,
"then" => 159usize,
"\0" => 159usize,
"^^" => 174usize,
"nounand" => 196usize,
">=" => 159usize,
"." => 204usize,
"else" => 159usize,
"nouneq" => 159usize,
")" => 159usize,
"next" => 159usize,
"from" => 159usize,
"<" => 159usize,
"noundiv" => 202usize,
"do" => 159usize,
">" => 159usize,
"-" => 214usize,
"elseif" => 159usize,
"<=" => 159usize,
"LIST_SEP" => 159usize,
"and" => 164usize,
"}" => 159usize,
":=" => 159usize,
"nounor" => 162usize,
"^" => 168usize,
"thru" => 159usize,
"while" => 159usize,
"nounadd" => 188usize
},
phf_map! { /* 132 */
"." => 204usize,
"while" => 169usize,
"or" => 224usize,
"next" => 169usize,
"<" => 169usize,
"#" => 169usize,
"]" => 169usize,
"^^" => 174usize,
"do" => 169usize,
"**" => 220usize,
"+" => 160usize,
"#pm#" => 200usize,
":" => 169usize,
"nounand" => 196usize,
"::" => 169usize,
"<=" => 169usize,
"|" => 169usize,
":=" => 169usize,
"^" => 168usize,
"STACKpmOPT" => 192usize,
"nouneq" => 169usize,
"~" => 218usize,
"nounpow" => 180usize,
"nounadd" => 188usize,
"step" => 169usize,
"nounsub" => 190usize,
"!!" => 222usize,
"::=" => 169usize,
"\0" => 169usize,
">=" => 169usize,
"LIST_SEP" => 169usize,
"=" => 169usize,
"+-" => 198usize,
"in" => 169usize,
"then" => 169usize,
"from" => 169usize,
"thru" => 169usize,
"and" => 164usize,
"!" => 194usize,
"for" => 169usize,
"nounor" => 162usize,
"END_TOKEN" => 169usize,
"-" => 214usize,
"blankmult" => 226usize,
")" => 169usize,
"elseif" => 169usize,
">" => 169usize,
"*" => 210usize,
"/" => 172usize,
"noundiv" => 202usize,
"else" => 169usize,
"unless" => 169usize,
"}" => 169usize
},
phf_map! { /* 133 */
"." => 204usize,
"while" => 163usize,
"]" => 163usize,
"nouneq" => 163usize,
"}" => 163usize,
"<=" => 163usize,
"noundiv" => 202usize,
"::" => 163usize,
"nounpow" => 180usize,
"|" => 163usize,
"in" => 163usize,
"^" => 168usize,
"do" => 163usize,
"=" => 163usize,
"#" => 163usize,
"or" => 163usize,
"next" => 163usize,
">" => 163usize,
"STACKpmOPT" => 192usize,
"#pm#" => 200usize,
"nounadd" => 188usize,
"<" => 163usize,
":=" => 163usize,
"else" => 163usize,
"**" => 220usize,
"\0" => 163usize,
"!!" => 222usize,
"-" => 214usize,
"+" => 160usize,
"nounand" => 196usize,
"*" => 210usize,
"step" => 163usize,
"::=" => 163usize,
"nounor" => 163usize,
"then" => 163usize,
"^^" => 174usize,
"nounsub" => 190usize,
"from" => 163usize,
"!" => 194usize,
"END_TOKEN" => 163usize,
"elseif" => 163usize,
")" => 163usize,
">=" => 163usize,
"unless" => 163usize,
"for" => 163usize,
"blankmult" => 226usize,
"thru" => 163usize,
"/" => 172usize,
":" => 163usize,
"LIST_SEP" => 163usize,
"and" => 164usize,
"+-" => 198usize,
"~" => 218usize
},
phf_map! { /* 134 */
"next" => 203usize,
"unless" => 203usize,
"." => 204usize,
"step" => 203usize,
"::=" => 203usize,
"elseif" => 203usize,
"=" => 203usize,
"STACKpmOPT" => 192usize,
":=" => 203usize,
"~" => 218usize,
")" => 203usize,
"+" => 160usize,
"nouneq" => 203usize,
"nounand" => 196usize,
"nounor" => 162usize,
"LIST_SEP" => 203usize,
"!" => 194usize,
"/" => 172usize,
"^" => 168usize,
"thru" => 203usize,
"then" => 203usize,
"^^" => 174usize,
"<=" => 203usize,
"while" => 203usize,
"else" => 203usize,
"nounpow" => 180usize,
"nounadd" => 188usize,
"for" => 203usize,
"#" => 203usize,
"+-" => 198usize,
"blankmult" => 226usize,
">=" => 203usize,
"or" => 224usize,
"*" => 210usize,
"<" => 203usize,
"|" => 203usize,
":" => 203usize,
"]" => 203usize,
"-" => 214usize,
"noundiv" => 202usize,
"and" => 164usize,
"END_TOKEN" => 203usize,
"from" => 203usize,
"#pm#" => 200usize,
">" => 203usize,
"in" => 203usize,
"do" => 203usize,
"}" => 203usize,
"**" => 220usize,
"!!" => 222usize,
"::" => 203usize,
"\0" => 203usize,
"nounsub" => 190usize
},
phf_map! { /* 135 */
"nouneq" => 149usize,
"in" => 149usize,
"^^" => 174usize,
"+" => 149usize,
"nounpow" => 180usize,
"elseif" => 149usize,
"::=" => 149usize,
"LIST_SEP" => 149usize,
"then" => 149usize,
"<=" => 149usize,
"noundiv" => 149usize,
":" => 149usize,
"<" => 149usize,
"#pm#" => 149usize,
"^" => 168usize,
"from" => 149usize,
"blankmult" => 226usize,
"do" => 149usize,
"next" => 149usize,
"\0" => 149usize,
"]" => 149usize,
"|" => 149usize,
"::" => 149usize,
":=" => 149usize,
"STACKpmOPT" => 149usize,
"else" => 149usize,
"nounadd" => 149usize,
"or" => 224usize,
"while" => 149usize,
"nounsub" => 149usize,
"thru" => 149usize,
"nounor" => 162usize,
"and" => 164usize,
"nounand" => 196usize,
"step" => 149usize,
"!!" => 222usize,
">=" => 149usize,
"!" => 194usize,
"-" => 149usize,
">" => 149usize,
"}" => 149usize,
"unless" => 149usize,
")" => 149usize,
"END_TOKEN" => 149usize,
"~" => 218usize,
"=" => 149usize,
"/" => 149usize,
"#" => 149usize,
"*" => 149usize,
"for" => 149usize,
"+-" => 149usize,
"**" => 220usize,
"." => 149usize
},
phf_map! { /* 136 */
"|" => 171usize,
"#pm#" => 200usize,
"}" => 171usize,
"!!" => 222usize,
">" => 171usize,
"from" => 171usize,
"thru" => 171usize,
"STACKpmOPT" => 192usize,
"for" => 171usize,
"noundiv" => 202usize,
"nounor" => 162usize,
"nounand" => 196usize,
":=" => 171usize,
"~" => 218usize,
">=" => 171usize,
"/" => 172usize,
"\0" => 171usize,
":" => 171usize,
"else" => 171usize,
"do" => 171usize,
"in" => 171usize,
"::" => 171usize,
"LIST_SEP" => 171usize,
"while" => 171usize,
"**" => 220usize,
"-" => 214usize,
"=" => 171usize,
"<" => 171usize,
"or" => 224usize,
"+-" => 198usize,
"and" => 164usize,
"!" => 194usize,
"nouneq" => 171usize,
"step" => 171usize,
"next" => 171usize,
"nounadd" => 188usize,
"*" => 210usize,
"]" => 171usize,
"unless" => 171usize,
"^" => 168usize,
"nounpow" => 180usize,
")" => 171usize,
"elseif" => 171usize,
"::=" => 171usize,
"+" => 160usize,
"nounsub" => 190usize,
"END_TOKEN" => 171usize,
"then" => 171usize,
"." => 204usize,
"blankmult" => 226usize,
"^^" => 174usize,
"<=" => 171usize,
"#" => 171usize
},
phf_map! { /* 137 */
"then" => 155usize,
":" => 155usize,
">=" => 155usize,
"and" => 164usize,
"\0" => 155usize,
"#pm#" => 155usize,
"+" => 155usize,
"^" => 168usize,
"<" => 155usize,
"!" => 194usize,
"LIST_SEP" => 155usize,
"!!" => 222usize,
">" => 155usize,
"nounpow" => 180usize,
"while" => 155usize,
"in" => 155usize,
"]" => 155usize,
"do" => 155usize,
"STACKpmOPT" => 155usize,
"unless" => 155usize,
"}" => 155usize,
"::" => 155usize,
"|" => 155usize,
":=" => 155usize,
"-" => 155usize,
"next" => 155usize,
"**" => 220usize,
"^^" => 174usize,
"nounsub" => 155usize,
"from" => 155usize,
"+-" => 155usize,
"::=" => 155usize,
"for" => 155usize,
"<=" => 155usize,
"blankmult" => 226usize,
"nouneq" => 155usize,
"nounor" => 162usize,
"step" => 155usize,
"~" => 218usize,
"else" => 155usize,
"or" => 224usize,
"/" => 155usize,
")" => 155usize,
"nounand" => 196usize,
"thru" => 155usize,
"." => 204usize,
"noundiv" => 155usize,
"*" => 155usize,
"END_TOKEN" => 155usize,
"elseif" => 155usize,
"#" => 155usize,
"=" => 155usize,
"nounadd" => 155usize
},
phf_map! { /* 138 */
"blankmult" => 226usize,
"^^" => 174usize,
"^" => 168usize,
"next" => 147usize,
"do" => 147usize,
"=" => 147usize,
"<=" => 147usize,
"\0" => 147usize,
"from" => 147usize,
"nounor" => 162usize,
"-" => 147usize,
"else" => 147usize,
"nounpow" => 180usize,
"while" => 147usize,
"LIST_SEP" => 147usize,
">=" => 147usize,
"*" => 147usize,
"nounand" => 196usize,
"END_TOKEN" => 147usize,
"~" => 218usize,
"nouneq" => 147usize,
"nounadd" => 147usize,
"#pm#" => 147usize,
"+-" => 147usize,
"::=" => 147usize,
"nounsub" => 147usize,
"." => 147usize,
"elseif" => 147usize,
"}" => 147usize,
":=" => 147usize,
")" => 147usize,
"STACKpmOPT" => 147usize,
":" => 147usize,
"#" => 147usize,
"!!" => 222usize,
"then" => 147usize,
"+" => 147usize,
"for" => 147usize,
"::" => 147usize,
"**" => 220usize,
"thru" => 147usize,
"step" => 147usize,
"in" => 147usize,
"and" => 164usize,
"]" => 147usize,
"<" => 147usize,
">" => 147usize,
"!" => 194usize,
"unless" => 147usize,
"|" => 147usize,
"/" => 147usize,
"noundiv" => 147usize,
"or" => 224usize
},
phf_map! { /* 139 */
"elseif" => 177usize,
"=" => 177usize,
":" => 177usize,
"thru" => 177usize,
"+" => 160usize,
"*" => 210usize,
"noundiv" => 202usize,
"for" => 177usize,
"]" => 177usize,
"}" => 177usize,
"<" => 177usize,
"nounpow" => 180usize,
"nounor" => 162usize,
":=" => 177usize,
"next" => 177usize,
"unless" => 177usize,
"~" => 218usize,
"STACKpmOPT" => 192usize,
"**" => 220usize,
"nounand" => 196usize,
">" => 177usize,
"::" => 177usize,
"nouneq" => 177usize,
"END_TOKEN" => 177usize,
"|" => 177usize,
"step" => 177usize,
"/" => 172usize,
"." => 204usize,
"and" => 164usize,
"^^" => 174usize,
"or" => 224usize,
")" => 177usize,
"-" => 214usize,
"#" => 177usize,
"#pm#" => 200usize,
"::=" => 177usize,
"!!" => 222usize,
"\0" => 177usize,
"+-" => 198usize,
"do" => 177usize,
"blankmult" => 226usize,
"while" => 177usize,
"nounadd" => 188usize,
"then" => 177usize,
"nounsub" => 190usize,
">=" => 177usize,
"from" => 177usize,
"!" => 194usize,
"else" => 177usize,
"<=" => 177usize,
"in" => 177usize,
"LIST_SEP" => 177usize,
"^" => 168usize
},
phf_map! { /* 140 */
"next" => 187usize,
"while" => 187usize,
"+-" => 198usize,
"else" => 187usize,
"unless" => 187usize,
"]" => 187usize,
"from" => 187usize,
"." => 204usize,
"}" => 187usize,
">=" => 187usize,
"LIST_SEP" => 187usize,
":" => 187usize,
"#" => 187usize,
"-" => 214usize,
"blankmult" => 226usize,
"or" => 224usize,
"END_TOKEN" => 187usize,
"\0" => 187usize,
"<" => 187usize,
"in" => 187usize,
"^^" => 174usize,
"+" => 160usize,
"then" => 187usize,
"elseif" => 187usize,
"/" => 172usize,
"=" => 187usize,
"step" => 187usize,
"do" => 187usize,
"::=" => 187usize,
"nounand" => 196usize,
"nounpow" => 180usize,
"noundiv" => 202usize,
"nounadd" => 188usize,
"!!" => 222usize,
"^" => 168usize,
"**" => 220usize,
"::" => 187usize,
"nounor" => 162usize,
"STACKpmOPT" => 192usize,
"#pm#" => 200usize,
"for" => 187usize,
"thru" => 187usize,
"and" => 164usize,
"nouneq" => 187usize,
"*" => 210usize,
":=" => 187usize,
"|" => 187usize,
"~" => 218usize,
"<=" => 187usize,
"nounsub" => 190usize,
"!" => 194usize,
">" => 187usize,
")" => 187usize
},
phf_map! { /* 141 */
"END_TOKEN" => 195usize,
"^^" => 174usize,
"LIST_SEP" => 195usize,
"nounadd" => 195usize,
"::=" => 195usize,
"\0" => 195usize,
"blankmult" => 226usize,
"nouneq" => 195usize,
"next" => 195usize,
"for" => 195usize,
"and" => 164usize,
")" => 195usize,
">=" => 195usize,
"<" => 195usize,
"*" => 195usize,
"^" => 168usize,
"unless" => 195usize,
"#pm#" => 195usize,
"nounand" => 196usize,
"+" => 195usize,
"do" => 195usize,
"::" => 195usize,
"." => 195usize,
"<=" => 195usize,
"|" => 195usize,
"noundiv" => 195usize,
"thru" => 195usize,
"else" => 195usize,
"+-" => 195usize,
"**" => 220usize,
"nounsub" => 195usize,
"nounor" => 162usize,
"in" => 195usize,
"-" => 195usize,
"]" => 195usize,
"then" => 195usize,
">" => 195usize,
"step" => 195usize,
"!!" => 222usize,
":=" => 195usize,
"STACKpmOPT" => 195usize,
"while" => 195usize,
"or" => 224usize,
"~" => 218usize,
"#" => 195usize,
"}" => 195usize,
"nounpow" => 180usize,
"!" => 194usize,
"elseif" => 195usize,
":" => 195usize,
"/" => 195usize,
"from" => 195usize,
"=" => 195usize
},
phf_map! { /* 142 */
"step" => 141usize,
"nounadd" => 188usize,
"elseif" => 141usize,
"unless" => 141usize,
"-" => 214usize,
"!" => 194usize,
"next" => 141usize,
"^^" => 174usize,
"else" => 141usize,
"+-" => 198usize,
"::" => 141usize,
":" => 141usize,
"<=" => 141usize,
"*" => 210usize,
"thru" => 141usize,
"LIST_SEP" => 141usize,
"nounor" => 162usize,
"and" => 164usize,
"END_TOKEN" => 141usize,
"." => 204usize,
"while" => 141usize,
"#" => 141usize,
"do" => 141usize,
"blankmult" => 226usize,
">=" => 141usize,
">" => 141usize,
"}" => 141usize,
":=" => 141usize,
"noundiv" => 202usize,
"~" => 218usize,
"^" => 168usize,
"/" => 172usize,
"nounand" => 196usize,
")" => 141usize,
"!!" => 222usize,
"]" => 141usize,
"STACKpmOPT" => 192usize,
"nounpow" => 180usize,
"**" => 220usize,
"|" => 141usize,
"#pm#" => 200usize,
"=" => 141usize,
"then" => 141usize,
"nouneq" => 141usize,
"for" => 141usize,
"::=" => 141usize,
"in" => 141usize,
"or" => 224usize,
"\0" => 141usize,
"<" => 141usize,
"+" => 160usize,
"from" => 141usize,
"nounsub" => 190usize
},
phf_map! { /* 143 */
"for" => 185usize,
":=" => 185usize,
"::=" => 185usize,
"or" => 224usize,
"END_TOKEN" => 185usize,
"nouneq" => 185usize,
"nounsub" => 190usize,
"noundiv" => 202usize,
"nounpow" => 180usize,
"=" => 185usize,
"nounand" => 196usize,
"~" => 218usize,
"unless" => 185usize,
")" => 185usize,
"LIST_SEP" => 185usize,
"blankmult" => 226usize,
"|" => 185usize,
"+" => 160usize,
":" => 185usize,
"from" => 185usize,
"nounadd" => 188usize,
"else" => 185usize,
"!!" => 222usize,
"**" => 220usize,
"]" => 185usize,
"^" => 168usize,
"*" => 210usize,
"\0" => 185usize,
"step" => 185usize,
"+-" => 198usize,
"#" => 185usize,
"nounor" => 162usize,
">" => 185usize,
"then" => 185usize,
"STACKpmOPT" => 192usize,
"^^" => 174usize,
"thru" => 185usize,
"!" => 194usize,
"in" => 185usize,
"-" => 214usize,
"do" => 185usize,
"and" => 164usize,
"}" => 185usize,
"next" => 185usize,
"::" => 185usize,
"/" => 172usize,
"<" => 185usize,
"#pm#" => 200usize,
"<=" => 185usize,
">=" => 185usize,
"elseif" => 185usize,
"." => 204usize,
"while" => 185usize
},
phf_map! { /* 144 */
"unless" => 175usize,
"then" => 175usize,
">" => 175usize,
"else" => 175usize,
"and" => 164usize,
"END_TOKEN" => 175usize,
"nounand" => 196usize,
"!" => 194usize,
"in" => 175usize,
"blankmult" => 226usize,
"nouneq" => 175usize,
"<" => 175usize,
">=" => 175usize,
"#" => 175usize,
"/" => 172usize,
"noundiv" => 202usize,
"thru" => 175usize,
"*" => 210usize,
":=" => 175usize,
"STACKpmOPT" => 192usize,
"<=" => 175usize,
"nounsub" => 190usize,
"nounpow" => 180usize,
"for" => 175usize,
"::" => 175usize,
"}" => 175usize,
"|" => 175usize,
"LIST_SEP" => 175usize,
"step" => 175usize,
"^^" => 174usize,
"~" => 218usize,
"elseif" => 175usize,
"from" => 175usize,
"::=" => 175usize,
"or" => 224usize,
"#pm#" => 200usize,
"nounadd" => 188usize,
"]" => 175usize,
":" => 175usize,
"\0" => 175usize,
"!!" => 222usize,
"-" => 214usize,
"do" => 175usize,
")" => 175usize,
"^" => 168usize,
"=" => 175usize,
"next" => 175usize,
"." => 204usize,
"while" => 175usize,
"nounor" => 162usize,
"+" => 160usize,
"**" => 220usize,
"+-" => 198usize
},
phf_map! { /* 145 */
"\0" => 191usize,
"::" => 191usize,
"while" => 191usize,
"and" => 164usize,
"<" => 191usize,
"+" => 160usize,
":" => 191usize,
"|" => 191usize,
">=" => 191usize,
"**" => 220usize,
"#" => 191usize,
"or" => 224usize,
"^^" => 174usize,
"do" => 191usize,
"END_TOKEN" => 191usize,
">" => 191usize,
"-" => 214usize,
"else" => 191usize,
"." => 204usize,
"nounor" => 162usize,
"thru" => 191usize,
"step" => 191usize,
"+-" => 191usize,
"nounsub" => 190usize,
"for" => 191usize,
":=" => 191usize,
"]" => 191usize,
")" => 191usize,
"#pm#" => 191usize,
"in" => 191usize,
"blankmult" => 226usize,
"^" => 168usize,
"~" => 218usize,
"next" => 191usize,
"::=" => 191usize,
"LIST_SEP" => 191usize,
"}" => 191usize,
"nouneq" => 191usize,
"from" => 191usize,
"nounadd" => 188usize,
"elseif" => 191usize,
"!" => 194usize,
"!!" => 222usize,
"STACKpmOPT" => 191usize,
"nounand" => 196usize,
"nounpow" => 180usize,
"=" => 191usize,
"*" => 210usize,
"unless" => 191usize,
"/" => 172usize,
"noundiv" => 202usize,
"<=" => 191usize,
"then" => 191usize
},
phf_map! { /* 146 */
"#pm#" => 193usize,
"step" => 193usize,
"!!" => 222usize,
"and" => 164usize,
"blankmult" => 226usize,
"elseif" => 193usize,
"::" => 193usize,
":=" => 193usize,
"END_TOKEN" => 193usize,
"/" => 172usize,
"*" => 210usize,
"or" => 224usize,
">=" => 193usize,
"+-" => 193usize,
"::=" => 193usize,
"<" => 193usize,
"=" => 193usize,
"noundiv" => 202usize,
"#" => 193usize,
"nounpow" => 180usize,
"nounor" => 162usize,
"}" => 193usize,
"!" => 194usize,
")" => 193usize,
"+" => 193usize,
"in" => 193usize,
"^" => 168usize,
"nounsub" => 193usize,
"-" => 193usize,
"from" => 193usize,
"LIST_SEP" => 193usize,
"thru" => 193usize,
"while" => 193usize,
"STACKpmOPT" => 193usize,
"\0" => 193usize,
"do" => 193usize,
">" => 193usize,
"~" => 218usize,
"for" => 193usize,
"nouneq" => 193usize,
"]" => 193usize,
"next" => 193usize,
":" => 193usize,
"." => 204usize,
"nounand" => 196usize,
"then" => 193usize,
"<=" => 193usize,
"nounadd" => 193usize,
"else" => 193usize,
"**" => 220usize,
"^^" => 174usize,
"unless" => 193usize,
"|" => 193usize
},
phf_map! { /* 147 */
"nounadd" => 201usize,
":=" => 201usize,
"<" => 201usize,
"!" => 194usize,
"^^" => 174usize,
"for" => 201usize,
"nounor" => 162usize,
"::" => 201usize,
"do" => 201usize,
">=" => 201usize,
"or" => 224usize,
"#" => 201usize,
"}" => 201usize,
"in" => 201usize,
"+-" => 198usize,
"nounpow" => 180usize,
"then" => 201usize,
"::=" => 201usize,
"nouneq" => 201usize,
"thru" => 201usize,
"]" => 201usize,
"=" => 201usize,
"**" => 220usize,
"!!" => 222usize,
"next" => 201usize,
")" => 201usize,
"|" => 201usize,
"nounsub" => 201usize,
"-" => 201usize,
"nounand" => 196usize,
"~" => 218usize,
"^" => 168usize,
"STACKpmOPT" => 192usize,
":" => 201usize,
"\0" => 201usize,
">" => 201usize,
"<=" => 201usize,
"elseif" => 201usize,
"blankmult" => 226usize,
"*" => 210usize,
"else" => 201usize,
"LIST_SEP" => 201usize,
"unless" => 201usize,
"/" => 172usize,
"." => 204usize,
"END_TOKEN" => 201usize,
"+" => 201usize,
"noundiv" => 202usize,
"while" => 201usize,
"#pm#" => 200usize,
"and" => 164usize,
"step" => 201usize,
"from" => 201usize
},
phf_map! { /* 148 */
"~" => 218usize,
"**" => 220usize,
"/" => 172usize,
"LIST_SEP" => 167usize,
"in" => 167usize,
">=" => 167usize,
")" => 167usize,
"+-" => 198usize,
"}" => 167usize,
"^^" => 174usize,
"nouneq" => 167usize,
"and" => 164usize,
"#pm#" => 200usize,
"!!" => 222usize,
"blankmult" => 226usize,
"nounor" => 167usize,
"nounpow" => 180usize,
"::" => 167usize,
"for" => 167usize,
"from" => 167usize,
"while" => 167usize,
"]" => 167usize,
"noundiv" => 202usize,
"do" => 167usize,
"nounadd" => 188usize,
":" => 167usize,
"|" => 167usize,
"unless" => 167usize,
"<=" => 167usize,
"." => 204usize,
"elseif" => 167usize,
"+" => 160usize,
">" => 167usize,
"step" => 167usize,
"#" => 167usize,
"STACKpmOPT" => 192usize,
":=" => 167usize,
"or" => 167usize,
"*" => 210usize,
"!" => 194usize,
"nounsub" => 190usize,
"-" => 214usize,
"thru" => 167usize,
"next" => 167usize,
"::=" => 167usize,
"\0" => 167usize,
"^" => 168usize,
"else" => 167usize,
"nounand" => 196usize,
"then" => 167usize,
"=" => 167usize,
"END_TOKEN" => 167usize,
"<" => 167usize
},
phf_map! { /* 149 */
"or" => 224usize,
"nounand" => 196usize,
"and" => 164usize,
"nouneq" => 161usize,
"step" => 161usize,
"thru" => 161usize,
"do" => 161usize,
"END_TOKEN" => 161usize,
"+" => 161usize,
"nounsub" => 161usize,
"\0" => 161usize,
"STACKpmOPT" => 192usize,
"**" => 220usize,
"nounor" => 162usize,
"^^" => 174usize,
"noundiv" => 202usize,
"." => 204usize,
"=" => 161usize,
"unless" => 161usize,
"else" => 161usize,
">" => 161usize,
"nounpow" => 180usize,
")" => 161usize,
"elseif" => 161usize,
"::" => 161usize,
"-" => 161usize,
"blankmult" => 226usize,
"::=" => 161usize,
"*" => 210usize,
"in" => 161usize,
"}" => 161usize,
"then" => 161usize,
"for" => 161usize,
":=" => 161usize,
":" => 161usize,
"!" => 194usize,
"~" => 218usize,
"]" => 161usize,
">=" => 161usize,
"#pm#" => 200usize,
"while" => 161usize,
"|" => 161usize,
"#" => 161usize,
"!!" => 222usize,
"+-" => 198usize,
"^" => 168usize,
"/" => 172usize,
"<" => 161usize,
"nounadd" => 161usize,
"from" => 161usize,
"LIST_SEP" => 161usize,
"<=" => 161usize,
"next" => 161usize
},
phf_map! { /* 150 */
"do" => 143usize,
"!!" => 222usize,
"from" => 143usize,
"nounpow" => 180usize,
"=" => 143usize,
"unless" => 143usize,
"<" => 143usize,
"nounadd" => 143usize,
"noundiv" => 202usize,
"for" => 143usize,
"-" => 143usize,
"nounor" => 162usize,
")" => 143usize,
">=" => 143usize,
"^" => 168usize,
">" => 143usize,
"or" => 224usize,
"step" => 143usize,
"|" => 143usize,
"]" => 143usize,
"::" => 143usize,
"elseif" => 143usize,
"END_TOKEN" => 143usize,
"#" => 143usize,
"}" => 143usize,
"and" => 164usize,
"else" => 143usize,
"nounand" => 196usize,
"nouneq" => 143usize,
"+-" => 198usize,
":" => 143usize,
"**" => 220usize,
"then" => 143usize,
"blankmult" => 226usize,
"::=" => 143usize,
"~" => 218usize,
"!" => 194usize,
"<=" => 143usize,
"LIST_SEP" => 143usize,
"STACKpmOPT" => 192usize,
"while" => 143usize,
"nounsub" => 143usize,
"#pm#" => 200usize,
"^^" => 174usize,
"\0" => 143usize,
"in" => 143usize,
"thru" => 143usize,
"/" => 172usize,
"." => 204usize,
"*" => 210usize,
"+" => 143usize,
"next" => 143usize,
":=" => 143usize
},
phf_map! { /* 151 */
"from" => 197usize,
"nounsub" => 197usize,
"for" => 197usize,
"::" => 197usize,
"." => 204usize,
":" => 197usize,
"|" => 197usize,
"/" => 197usize,
"END_TOKEN" => 197usize,
"-" => 197usize,
"nounpow" => 180usize,
">=" => 197usize,
"!" => 194usize,
"!!" => 222usize,
"nounor" => 162usize,
"<" => 197usize,
"}" => 197usize,
"LIST_SEP" => 197usize,
"unless" => 197usize,
"*" => 197usize,
":=" => 197usize,
"nounand" => 196usize,
"]" => 197usize,
"do" => 197usize,
"^^" => 174usize,
"or" => 224usize,
"in" => 197usize,
"+-" => 197usize,
"+" => 197usize,
"while" => 197usize,
"noundiv" => 197usize,
"nounadd" => 197usize,
"and" => 164usize,
">" => 197usize,
"STACKpmOPT" => 197usize,
"#pm#" => 197usize,
"**" => 220usize,
"<=" => 197usize,
"#" => 197usize,
"::=" => 197usize,
"^" => 168usize,
"thru" => 197usize,
")" => 197usize,
"else" => 197usize,
"next" => 197usize,
"\0" => 197usize,
"blankmult" => 226usize,
"nouneq" => 197usize,
"then" => 197usize,
"elseif" => 197usize,
"~" => 218usize,
"=" => 197usize,
"step" => 197usize
},
phf_map! { /* 152 */
"noundiv" => 202usize,
"**" => 220usize,
"+" => 151usize,
">" => 151usize,
"blankmult" => 226usize,
">=" => 151usize,
"^" => 168usize,
"do" => 151usize,
"-" => 151usize,
"+-" => 151usize,
"next" => 151usize,
"elseif" => 151usize,
"/" => 172usize,
"and" => 164usize,
"nounor" => 162usize,
"nounadd" => 151usize,
"}" => 151usize,
"*" => 210usize,
"END_TOKEN" => 151usize,
"nounsub" => 151usize,
"for" => 151usize,
"<" => 151usize,
"!!" => 222usize,
"!" => 194usize,
":" => 151usize,
"#" => 151usize,
"~" => 218usize,
"step" => 151usize,
"=" => 151usize,
"thru" => 151usize,
"while" => 151usize,
"^^" => 174usize,
"else" => 151usize,
"nouneq" => 151usize,
"\0" => 151usize,
"LIST_SEP" => 151usize,
"unless" => 151usize,
"<=" => 151usize,
":=" => 151usize,
"STACKpmOPT" => 151usize,
")" => 151usize,
"." => 204usize,
"]" => 151usize,
"then" => 151usize,
"::" => 151usize,
"nounpow" => 180usize,
"nounand" => 196usize,
"#pm#" => 151usize,
"|" => 151usize,
"from" => 151usize,
"or" => 224usize,
"::=" => 151usize,
"in" => 151usize
},
phf_map! { /* 153 */
"+-" => 198usize,
"<" => 173usize,
"::=" => 173usize,
"step" => 173usize,
"nounand" => 196usize,
"::" => 173usize,
"|" => 173usize,
"nouneq" => 173usize,
"]" => 173usize,
"LIST_SEP" => 173usize,
")" => 173usize,
"unless" => 173usize,
"noundiv" => 202usize,
"^^" => 174usize,
">=" => 173usize,
"nounsub" => 190usize,
"!!" => 222usize,
">" => 173usize,
"else" => 173usize,
"STACKpmOPT" => 192usize,
"elseif" => 173usize,
"/" => 172usize,
"while" => 173usize,
"=" => 173usize,
"then" => 173usize,
"nounpow" => 180usize,
"thru" => 173usize,
"^" => 168usize,
":=" => 173usize,
"next" => 173usize,
"~" => 218usize,
"+" => 160usize,
"\0" => 173usize,
"<=" => 173usize,
"}" => 173usize,
"nounadd" => 188usize,
"!" => 194usize,
"." => 204usize,
"#" => 173usize,
"from" => 173usize,
"for" => 173usize,
"in" => 173usize,
"**" => 220usize,
"nounor" => 162usize,
"*" => 210usize,
":" => 173usize,
"-" => 214usize,
"blankmult" => 226usize,
"or" => 224usize,
"and" => 164usize,
"END_TOKEN" => 173usize,
"do" => 173usize,
"#pm#" => 200usize
},
phf_map! { /* 154 */
"-" => 214usize,
"noundiv" => 202usize,
"nounand" => 196usize,
"nounsub" => 190usize,
"**" => 220usize,
"elseif" => 179usize,
"from" => 179usize,
"::" => 179usize,
"unless" => 179usize,
"while" => 179usize,
"|" => 179usize,
"nounpow" => 180usize,
"nouneq" => 179usize,
":=" => 179usize,
"<" => 179usize,
"~" => 218usize,
"}" => 179usize,
"nounadd" => 188usize,
"next" => 179usize,
"!" => 194usize,
"^^" => 174usize,
"else" => 179usize,
"\0" => 179usize,
"^" => 168usize,
"*" => 210usize,
"thru" => 179usize,
"do" => 179usize,
"=" => 179usize,
"or" => 224usize,
">=" => 179usize,
"+" => 160usize,
">" => 179usize,
"and" => 164usize,
"blankmult" => 226usize,
"in" => 179usize,
"#" => 179usize,
"+-" => 198usize,
"<=" => 179usize,
"then" => 179usize,
"STACKpmOPT" => 192usize,
"for" => 179usize,
"!!" => 222usize,
"/" => 172usize,
"::=" => 179usize,
"step" => 179usize,
"]" => 179usize,
"." => 204usize,
")" => 179usize,
":" => 179usize,
"#pm#" => 200usize,
"nounor" => 162usize,
"END_TOKEN" => 179usize,
"LIST_SEP" => 179usize
},
phf_map! { /* 155 */
"noundiv" => 202usize,
"or" => 224usize,
"from" => 153usize,
"::" => 153usize,
"<=" => 153usize,
"!!" => 222usize,
"::=" => 153usize,
"nounsub" => 153usize,
"|" => 153usize,
"/" => 172usize,
"=" => 153usize,
"^" => 168usize,
"]" => 153usize,
")" => 153usize,
"nounpow" => 180usize,
"thru" => 153usize,
"~" => 218usize,
":" => 153usize,
"else" => 153usize,
"LIST_SEP" => 153usize,
"and" => 164usize,
">" => 153usize,
"elseif" => 153usize,
"+-" => 153usize,
"blankmult" => 226usize,
"^^" => 174usize,
"step" => 153usize,
"#pm#" => 153usize,
"." => 204usize,
"}" => 153usize,
"-" => 153usize,
"+" => 153usize,
"nouneq" => 153usize,
"\0" => 153usize,
"next" => 153usize,
"while" => 153usize,
"nounand" => 196usize,
"STACKpmOPT" => 153usize,
"**" => 220usize,
"then" => 153usize,
"unless" => 153usize,
"*" => 210usize,
"in" => 153usize,
"nounor" => 162usize,
"nounadd" => 153usize,
"#" => 153usize,
"!" => 194usize,
"for" => 153usize,
"do" => 153usize,
"<" => 153usize,
"END_TOKEN" => 153usize,
">=" => 153usize,
":=" => 153usize
},
phf_map! { /* 156 */
"elseif" => 181usize,
"*" => 210usize,
"or" => 224usize,
":=" => 181usize,
")" => 181usize,
"}" => 181usize,
"nounadd" => 188usize,
"." => 204usize,
"]" => 181usize,
"nounpow" => 180usize,
"<=" => 181usize,
"else" => 181usize,
"from" => 181usize,
"!!" => 222usize,
"+" => 160usize,
"nounsub" => 190usize,
"|" => 181usize,
"LIST_SEP" => 181usize,
"STACKpmOPT" => 192usize,
"step" => 181usize,
"+-" => 198usize,
"nounand" => 196usize,
"!" => 194usize,
">" => 181usize,
"::" => 181usize,
">=" => 181usize,
"while" => 181usize,
"=" => 181usize,
"blankmult" => 226usize,
"^" => 168usize,
"unless" => 181usize,
"nounor" => 162usize,
"~" => 218usize,
"::=" => 181usize,
":" => 181usize,
"thru" => 181usize,
"nouneq" => 181usize,
"noundiv" => 202usize,
"END_TOKEN" => 181usize,
"and" => 164usize,
"<" => 181usize,
"**" => 220usize,
"then" => 181usize,
"#" => 181usize,
"/" => 172usize,
"for" => 181usize,
"-" => 214usize,
"do" => 181usize,
"in" => 181usize,
"^^" => 174usize,
"next" => 181usize,
"#pm#" => 200usize,
"\0" => 181usize
},
phf_map! { /* 157 */
"do" => 157usize,
"." => 204usize,
"from" => 157usize,
"<=" => 157usize,
"=" => 157usize,
"*" => 210usize,
"#" => 157usize,
"^^" => 174usize,
"blankmult" => 226usize,
"nounsub" => 157usize,
"!" => 194usize,
"STACKpmOPT" => 157usize,
"in" => 157usize,
"or" => 224usize,
"step" => 157usize,
"LIST_SEP" => 157usize,
")" => 157usize,
"\0" => 157usize,
":=" => 157usize,
"nounpow" => 180usize,
"!!" => 222usize,
"/" => 172usize,
"noundiv" => 202usize,
"thru" => 157usize,
"END_TOKEN" => 157usize,
"then" => 157usize,
"::" => 157usize,
"}" => 157usize,
"nounor" => 162usize,
"unless" => 157usize,
"else" => 157usize,
"|" => 157usize,
"~" => 218usize,
"#pm#" => 157usize,
"for" => 157usize,
"next" => 157usize,
"while" => 157usize,
"**" => 220usize,
":" => 157usize,
"nouneq" => 157usize,
"+-" => 157usize,
"^" => 168usize,
"-" => 157usize,
"nounand" => 196usize,
"<" => 157usize,
"+" => 157usize,
">" => 157usize,
"]" => 157usize,
"and" => 164usize,
"::=" => 157usize,
"nounadd" => 157usize,
"elseif" => 157usize,
">=" => 157usize
},
phf_map! { /* 158 */
"::" => 183usize,
"in" => 183usize,
"then" => 183usize,
"nounsub" => 190usize,
"unless" => 183usize,
"elseif" => 183usize,
"nouneq" => 183usize,
"nounadd" => 188usize,
"+" => 160usize,
"while" => 183usize,
"^^" => 174usize,
"do" => 183usize,
"nounor" => 162usize,
"noundiv" => 202usize,
"^" => 168usize,
"." => 204usize,
"}" => 183usize,
"|" => 183usize,
"-" => 214usize,
"<=" => 183usize,
">" => 183usize,
"STACKpmOPT" => 192usize,
"]" => 183usize,
"!!" => 222usize,
"and" => 164usize,
"nounand" => 196usize,
"LIST_SEP" => 183usize,
"or" => 224usize,
"+-" => 198usize,
":=" => 183usize,
"<" => 183usize,
"*" => 210usize,
"!" => 194usize,
"~" => 218usize,
")" => 183usize,
"from" => 183usize,
"END_TOKEN" => 183usize,
"::=" => 183usize,
"thru" => 183usize,
">=" => 183usize,
"\0" => 183usize,
"/" => 172usize,
":" => 183usize,
"#" => 183usize,
"#pm#" => 200usize,
"blankmult" => 226usize,
"for" => 183usize,
"nounpow" => 180usize,
"step" => 183usize,
"next" => 183usize,
"**" => 220usize,
"=" => 183usize,
"else" => 183usize
},
phf_map! { /* 159 */
"or" => 224usize,
">=" => 189usize,
"in" => 189usize,
"END_TOKEN" => 189usize,
"<=" => 189usize,
"unless" => 189usize,
"STACKpmOPT" => 192usize,
"next" => 189usize,
"#" => 189usize,
":" => 189usize,
":=" => 189usize,
"<" => 189usize,
"nounsub" => 190usize,
"elseif" => 189usize,
"+" => 160usize,
"then" => 189usize,
"**" => 220usize,
"~" => 218usize,
"-" => 214usize,
"thru" => 189usize,
"/" => 172usize,
"nounadd" => 188usize,
"blankmult" => 226usize,
"from" => 189usize,
"!" => 194usize,
"}" => 189usize,
"step" => 189usize,
"do" => 189usize,
"for" => 189usize,
"^^" => 174usize,
"#pm#" => 200usize,
"nounand" => 196usize,
">" => 189usize,
"nounpow" => 180usize,
"\0" => 189usize,
"^" => 168usize,
"while" => 189usize,
"|" => 189usize,
"]" => 189usize,
"LIST_SEP" => 189usize,
"+-" => 198usize,
"*" => 210usize,
"::=" => 189usize,
"nouneq" => 189usize,
")" => 189usize,
"else" => 189usize,
"." => 204usize,
"and" => 164usize,
"=" => 189usize,
"!!" => 222usize,
"::" => 189usize,
"nounor" => 162usize,
"noundiv" => 202usize
},
phf_map! { /* 160 */
"nouneq" => 145usize,
"for" => 145usize,
"STACKpmOPT" => 145usize,
"|" => 145usize,
"^^" => 174usize,
"step" => 145usize,
"}" => 145usize,
">" => 145usize,
"nounor" => 162usize,
":=" => 145usize,
"while" => 145usize,
"nounadd" => 145usize,
"next" => 145usize,
"nounand" => 196usize,
"::=" => 145usize,
"+-" => 145usize,
"blankmult" => 226usize,
":" => 145usize,
"/" => 145usize,
"." => 145usize,
"<=" => 145usize,
"\0" => 145usize,
"<" => 145usize,
"and" => 164usize,
"elseif" => 145usize,
"noundiv" => 145usize,
"#" => 145usize,
"END_TOKEN" => 145usize,
"nounpow" => 180usize,
"::" => 145usize,
"then" => 145usize,
"*" => 145usize,
"**" => 220usize,
"]" => 145usize,
"+" => 145usize,
"thru" => 145usize,
"LIST_SEP" => 145usize,
"from" => 145usize,
"#pm#" => 145usize,
"=" => 145usize,
"~" => 218usize,
"-" => 145usize,
")" => 145usize,
"nounsub" => 145usize,
"or" => 224usize,
">=" => 145usize,
"else" => 145usize,
"do" => 145usize,
"!" => 194usize,
"unless" => 145usize,
"!!" => 222usize,
"in" => 145usize,
"^" => 168usize
},
phf_map! { /* 161 */
"#" => 165usize,
"END_TOKEN" => 165usize,
":" => 165usize,
"!" => 194usize,
"::=" => 165usize,
"and" => 164usize,
"in" => 165usize,
"nounpow" => 180usize,
"~" => 218usize,
"thru" => 165usize,
"from" => 165usize,
"noundiv" => 202usize,
"<" => 165usize,
"=" => 165usize,
"STACKpmOPT" => 192usize,
"step" => 165usize,
"::" => 165usize,
"|" => 165usize,
"^^" => 174usize,
"nounand" => 196usize,
"else" => 165usize,
"+-" => 198usize,
"then" => 165usize,
"^" => 168usize,
"*" => 210usize,
"next" => 165usize,
"LIST_SEP" => 165usize,
"+" => 160usize,
"-" => 214usize,
"nouneq" => 165usize,
"]" => 165usize,
"or" => 224usize,
")" => 165usize,
"/" => 172usize,
"#pm#" => 200usize,
"while" => 165usize,
"." => 204usize,
"nounsub" => 190usize,
"do" => 165usize,
"<=" => 165usize,
"!!" => 222usize,
"}" => 165usize,
"elseif" => 165usize,
"nounor" => 162usize,
":=" => 165usize,
"blankmult" => 226usize,
"\0" => 165usize,
">=" => 165usize,
"nounadd" => 188usize,
"**" => 220usize,
"for" => 165usize,
"unless" => 165usize,
">" => 165usize
},
phf_map! { /* 162 */
":=" => 199usize,
"or" => 224usize,
"in" => 199usize,
"#pm#" => 200usize,
"**" => 220usize,
"while" => 199usize,
"LIST_SEP" => 199usize,
"next" => 199usize,
"then" => 199usize,
"noundiv" => 202usize,
"nounsub" => 190usize,
"." => 204usize,
"elseif" => 199usize,
"!!" => 222usize,
"blankmult" => 226usize,
"*" => 210usize,
">=" => 199usize,
"}" => 199usize,
":" => 199usize,
"nounadd" => 188usize,
"unless" => 199usize,
"^^" => 174usize,
"::=" => 199usize,
"!" => 194usize,
"]" => 199usize,
"\0" => 199usize,
"::" => 199usize,
"<" => 199usize,
"STACKpmOPT" => 192usize,
"=" => 199usize,
"else" => 199usize,
"<=" => 199usize,
"for" => 199usize,
"nouneq" => 199usize,
"/" => 172usize,
"nounand" => 196usize,
"+" => 160usize,
"nounpow" => 180usize,
"and" => 164usize,
"|" => 199usize,
"from" => 199usize,
"~" => 218usize,
"-" => 214usize,
"step" => 199usize,
")" => 199usize,
"+-" => 198usize,
"END_TOKEN" => 199usize,
"thru" => 199usize,
"nounor" => 162usize,
"#" => 199usize,
">" => 199usize,
"^" => 168usize,
"do" => 199usize
},
phf_map! { /* 163 */
"<=" => 79usize,
"nounsub" => 79usize,
")" => 79usize,
"!!" => 79usize,
"\0" => 79usize,
"+" => 79usize,
"}" => 79usize,
"|" => 79usize,
"-" => 79usize,
"^^" => 79usize,
"else" => 338usize,
"then" => 79usize,
"do" => 79usize,
"=" => 79usize,
"::=" => 79usize,
"!" => 79usize,
"::" => 79usize,
">" => 79usize,
"next" => 79usize,
"^" => 79usize,
":" => 79usize,
"for" => 79usize,
"step" => 79usize,
"noundiv" => 79usize,
"or" => 79usize,
"+-" => 79usize,
"and" => 79usize,
"in" => 79usize,
"*" => 79usize,
"." => 79usize,
"~" => 79usize,
"LIST_SEP" => 79usize,
"<" => 79usize,
"**" => 79usize,
"#pm#" => 79usize,
":=" => 79usize,
"thru" => 79usize,
"nounor" => 79usize,
"STACKpmOPT" => 79usize,
"nounand" => 79usize,
"unless" => 79usize,
"nounpow" => 79usize,
"#" => 79usize,
"/" => 79usize,
"END_TOKEN" => 79usize,
"]" => 79usize,
"elseif" => 342usize,
"from" => 79usize,
"nouneq" => 79usize,
"blankmult" => 79usize,
">=" => 79usize,
"while" => 79usize,
"nounadd" => 79usize
},
phf_map! { /* 164 */
"]" => 35usize,
"}" => 35usize,
"LIST_SEP" => 244usize,
")" => 35usize
},
phf_map! { /* 165 */
"END_TOKEN" => 21usize,
"LIST_SEP" => 148usize,
"\0" => 21usize
},
phf_map! { /* 166 */
"not " => 54usize,
"next" => 28usize,
"in" => 46usize,
"if" => 22usize,
"#pm#" => 86usize,
"ID" => 8usize,
"from" => 94usize,
"+-" => 26usize,
"?" => 32usize,
"while" => 44usize,
"UNARY_RECIP" => 76usize,
"thru" => 30usize,
"do" => 85usize,
"+" => 96usize,
"unless" => 12usize,
"INT" => 10usize,
"not" => 2usize,
"''" => 20usize,
"? " => 48usize,
"'" => 88usize,
"?? " => 74usize,
"|" => 18usize,
"-" => 98usize,
"[" => 40usize,
"for" => 42usize,
"(" => 80usize,
"FLOAT" => 36usize,
"STRING" => 60usize,
"{" => 24usize,
"step" => 92usize,
"BOOL" => 34usize
},
phf_map! { /* 167 */
"in" => 46usize,
"FLOAT" => 36usize,
"STRING" => 60usize,
"{" => 24usize,
"+" => 96usize,
"|" => 18usize,
"INT" => 10usize,
"next" => 28usize,
"#pm#" => 86usize,
"+-" => 26usize,
"not" => 2usize,
"?" => 32usize,
"UNARY_RECIP" => 76usize,
"''" => 20usize,
"ID" => 8usize,
"step" => 92usize,
"BOOL" => 34usize,
"'" => 88usize,
"do" => 85usize,
"-" => 98usize,
"while" => 44usize,
"if" => 22usize,
"not " => 54usize,
"?? " => 74usize,
"thru" => 30usize,
"unless" => 12usize,
"[" => 40usize,
"for" => 42usize,
"? " => 48usize,
"from" => 94usize,
"(" => 80usize
},
phf_map! { /* 168 */
"END_TOKEN" => 15usize,
"\0" => 15usize
},
phf_map! { /* 169 */
"not " => 54usize,
"do" => 85usize,
"while" => 44usize,
"{" => 24usize,
"not" => 2usize,
"+-" => 26usize,
"?" => 32usize,
"step" => 92usize,
"unless" => 12usize,
"? " => 48usize,
"|" => 18usize,
"UNARY_RECIP" => 76usize,
"from" => 94usize,
"FLOAT" => 36usize,
"in" => 46usize,
"-" => 98usize,
"(" => 80usize,
"thru" => 30usize,
"if" => 22usize,
"?? " => 74usize,
"'" => 88usize,
"STRING" => 60usize,
"for" => 42usize,
"ID" => 8usize,
"''" => 20usize,
"BOOL" => 34usize,
"#pm#" => 86usize,
"next" => 28usize,
"+" => 96usize,
"INT" => 10usize,
"[" => 40usize
},
phf_map! { /* 170 */
"=" => 73usize,
"else" => 73usize,
"nounadd" => 73usize,
"then" => 73usize,
"unless" => 73usize,
"from" => 73usize,
"~" => 73usize,
"*" => 73usize,
"nounor" => 73usize,
"for" => 73usize,
">=" => 73usize,
"LIST_SEP" => 73usize,
"::=" => 73usize,
"+" => 73usize,
">" => 73usize,
"END_TOKEN" => 73usize,
"**" => 73usize,
"-" => 73usize,
":=" => 73usize,
"elseif" => 73usize,
"or" => 73usize,
"nouneq" => 73usize,
":" => 73usize,
"noundiv" => 73usize,
"^" => 73usize,
"while" => 73usize,
"do" => 73usize,
"nounand" => 73usize,
"]" => 73usize,
"+-" => 73usize,
"<" => 73usize,
"step" => 73usize,
"in" => 73usize,
"STACKpmOPT" => 73usize,
"." => 73usize,
"|" => 73usize,
"/" => 73usize,
"\0" => 73usize,
"#pm#" => 73usize,
"#" => 73usize,
"nounpow" => 73usize,
"nounsub" => 73usize,
"blankmult" => 73usize,
"thru" => 73usize,
"!" => 73usize,
"and" => 73usize,
")" => 73usize,
"!!" => 73usize,
"next" => 73usize,
"}" => 73usize,
"::" => 73usize,
"^^" => 73usize,
"<=" => 73usize
},
phf_map! { /* 171 */
"step" => 92usize,
"INT" => 10usize,
"|" => 18usize,
"do" => 85usize,
"thru" => 30usize,
"STRING" => 60usize,
"+-" => 26usize,
"if" => 22usize,
"-" => 98usize,
"BOOL" => 34usize,
"for" => 42usize,
"'" => 88usize,
"+" => 96usize,
"[" => 40usize,
"? " => 48usize,
"(" => 80usize,
"#pm#" => 86usize,
"from" => 94usize,
"''" => 20usize,
"UNARY_RECIP" => 76usize,
"unless" => 12usize,
"while" => 44usize,
"not" => 2usize,
"ID" => 8usize,
"not " => 54usize,
"?? " => 74usize,
"next" => 28usize,
"{" => 24usize,
"FLOAT" => 36usize,
"?" => 32usize,
"in" => 46usize
},
phf_map! { /* 172 */
"}" => 33usize,
")" => 33usize,
"]" => 33usize
},
phf_map! { /* 173 */
"END_TOKEN" => 256usize,
"\0" => 11usize
},
phf_map! { /* 174 */
"LIST_SEP" => 148usize,
"END_TOKEN" => 21usize,
"\0" => 21usize
},
phf_map! { /* 175 */
"END_TOKEN" => 21usize,
"LIST_SEP" => 148usize,
"\0" => 21usize
},
phf_map! { /* 176 */
"+" => 75usize,
")" => 75usize,
"*" => 75usize,
"!!" => 75usize,
">" => 75usize,
"!" => 75usize,
"END_TOKEN" => 75usize,
"nounsub" => 75usize,
"^^" => 75usize,
"or" => 75usize,
"]" => 75usize,
"else" => 75usize,
"~" => 75usize,
"elseif" => 75usize,
"<=" => 75usize,
"#pm#" => 75usize,
"<" => 75usize,
"nounpow" => 75usize,
"and" => 75usize,
"nounadd" => 75usize,
"in" => 75usize,
"step" => 75usize,
"while" => 75usize,
"nouneq" => 75usize,
"next" => 75usize,
"**" => 75usize,
"\0" => 75usize,
"from" => 75usize,
"-" => 75usize,
"do" => 75usize,
"^" => 75usize,
"noundiv" => 75usize,
"." => 75usize,
"::" => 75usize,
"}" => 75usize,
"=" => 75usize,
"+-" => 75usize,
":=" => 75usize,
"LIST_SEP" => 75usize,
"unless" => 75usize,
"for" => 75usize,
"::=" => 75usize,
"|" => 75usize,
"nounand" => 75usize,
"nounor" => 75usize,
":" => 75usize,
"blankmult" => 75usize,
"#" => 75usize,
"then" => 75usize,
"/" => 75usize,
">=" => 75usize,
"thru" => 75usize,
"STACKpmOPT" => 75usize
},
phf_map! { /* 177 */
"then" => 362usize
},
phf_map! { /* 178 */
"\0" => 9usize
},
phf_map! { /* 179 */
"\0" => 19usize,
"END_TOKEN" => 19usize
},
phf_map! { /* 180 */
"\0" => 17usize,
"END_TOKEN" => 17usize
},
phf_map! { /* 181 */
"{" => 24usize,
"(" => 80usize,
"INT" => 10usize,
"? " => 48usize,
"not " => 54usize,
"if" => 22usize,
"next" => 28usize,
"in" => 46usize,
"+-" => 26usize,
"do" => 85usize,
"for" => 42usize,
"|" => 18usize,
"STRING" => 60usize,
"not" => 2usize,
"?? " => 74usize,
"''" => 20usize,
"BOOL" => 34usize,
"step" => 92usize,
"from" => 94usize,
"FLOAT" => 36usize,
"while" => 44usize,
"[" => 40usize,
"-" => 98usize,
"unless" => 12usize,
"+" => 96usize,
"?" => 32usize,
"#pm#" => 86usize,
"thru" => 30usize,
"'" => 88usize,
"ID" => 8usize,
"UNARY_RECIP" => 76usize
},
phf_map! { /* 182 */
"thru" => 79usize,
"LIST_SEP" => 79usize,
"STACKpmOPT" => 79usize,
">=" => 79usize,
"**" => 79usize,
"\0" => 79usize,
"nounsub" => 79usize,
"/" => 79usize,
"!" => 79usize,
"nounand" => 79usize,
"unless" => 79usize,
"next" => 79usize,
"while" => 79usize,
"}" => 79usize,
")" => 79usize,
"or" => 79usize,
"from" => 79usize,
"#pm#" => 79usize,
"-" => 79usize,
":" => 79usize,
"nounpow" => 79usize,
"nounor" => 79usize,
"step" => 79usize,
"elseif" => 342usize,
"~" => 79usize,
":=" => 79usize,
"else" => 338usize,
"<=" => 79usize,
"END_TOKEN" => 79usize,
"]" => 79usize,
"=" => 79usize,
"+" => 79usize,
"noundiv" => 79usize,
"^^" => 79usize,
"for" => 79usize,
"*" => 79usize,
"+-" => 79usize,
"nounadd" => 79usize,
"nouneq" => 79usize,
"!!" => 79usize,
"^" => 79usize,
"#" => 79usize,
"." => 79usize,
"::" => 79usize,
"and" => 79usize,
"::=" => 79usize,
"blankmult" => 79usize,
">" => 79usize,
"do" => 79usize,
"<" => 79usize,
"in" => 79usize,
"|" => 79usize,
"then" => 79usize
},
phf_map! { /* 183 */
"nounor" => 77usize,
"then" => 77usize,
"for" => 77usize,
">" => 77usize,
"and" => 77usize,
"nouneq" => 77usize,
"END_TOKEN" => 77usize,
"*" => 77usize,
"nounand" => 77usize,
"-" => 77usize,
"next" => 77usize,
"elseif" => 77usize,
"else" => 77usize,
"|" => 77usize,
"^" => 77usize,
":=" => 77usize,
"#pm#" => 77usize,
"<" => 77usize,
"~" => 77usize,
"thru" => 77usize,
"noundiv" => 77usize,
"\0" => 77usize,
"#" => 77usize,
"}" => 77usize,
"::" => 77usize,
"<=" => 77usize,
"**" => 77usize,
"do" => 77usize,
"nounpow" => 77usize,
"!!" => 77usize,
"/" => 77usize,
":" => 77usize,
"LIST_SEP" => 77usize,
"step" => 77usize,
"from" => 77usize,
"=" => 77usize,
"!" => 77usize,
"or" => 77usize,
"]" => 77usize,
")" => 77usize,
"::=" => 77usize,
"while" => 77usize,
">=" => 77usize,
"unless" => 77usize,
"^^" => 77usize,
"+" => 77usize,
"+-" => 77usize,
"nounsub" => 77usize,
"blankmult" => 77usize,
"STACKpmOPT" => 77usize,
"in" => 77usize,
"." => 77usize,
"nounadd" => 77usize
}],
   goto: phf_map! {   90usize => &NESTED_GOTO_90,
   174usize => &NESTED_GOTO_174,
   128usize => &NESTED_GOTO_128,
   104usize => &NESTED_GOTO_104,
   38usize => &NESTED_GOTO_38,
   169usize => &NESTED_GOTO_169,
   122usize => &NESTED_GOTO_122,
   11usize => &NESTED_GOTO_11,
   20usize => &NESTED_GOTO_20,
   96usize => &NESTED_GOTO_96,
   113usize => &NESTED_GOTO_113,
   182usize => &NESTED_GOTO_182,
   87usize => &NESTED_GOTO_87,
   27usize => &NESTED_GOTO_27,
   83usize => &NESTED_GOTO_83,
   13usize => &NESTED_GOTO_13,
   167usize => &NESTED_GOTO_167,
   91usize => &NESTED_GOTO_91,
   88usize => &NESTED_GOTO_88,
   21usize => &NESTED_GOTO_21,
   109usize => &NESTED_GOTO_109,
   108usize => &NESTED_GOTO_108,
   85usize => &NESTED_GOTO_85,
   49usize => &NESTED_GOTO_49,
   32usize => &NESTED_GOTO_32,
   181usize => &NESTED_GOTO_181,
   173usize => &NESTED_GOTO_173,
   166usize => &NESTED_GOTO_166,
   68usize => &NESTED_GOTO_68,
   100usize => &NESTED_GOTO_100,
   15usize => &NESTED_GOTO_15,
   164usize => &NESTED_GOTO_164,
   171usize => &NESTED_GOTO_171,
   1usize => &NESTED_GOTO_1,
   92usize => &NESTED_GOTO_92,
   89usize => &NESTED_GOTO_89,
   82usize => &NESTED_GOTO_82,
   102usize => &NESTED_GOTO_102,
   46usize => &NESTED_GOTO_46,
   107usize => &NESTED_GOTO_107,
   163usize => &NESTED_GOTO_163,
   16usize => &NESTED_GOTO_16,
   14usize => &NESTED_GOTO_14,
   12usize => &NESTED_GOTO_12,
   35usize => &NESTED_GOTO_35,
   86usize => &NESTED_GOTO_86,
   48usize => &NESTED_GOTO_48,
   175usize => &NESTED_GOTO_175,
   112usize => &NESTED_GOTO_112,
   56usize => &NESTED_GOTO_56,
   47usize => &NESTED_GOTO_47,
   165usize => &NESTED_GOTO_165,
   40usize => &NESTED_GOTO_40,
   23usize => &NESTED_GOTO_23,
   106usize => &NESTED_GOTO_106,
   101usize => &NESTED_GOTO_101,
   37usize => &NESTED_GOTO_37,
   129usize => &NESTED_GOTO_129,
   84usize => &NESTED_GOTO_84,
   69usize => &NESTED_GOTO_69,
   44usize => &NESTED_GOTO_44,
   22usize => &NESTED_GOTO_22,
   93usize => &NESTED_GOTO_93,
   80usize => &NESTED_GOTO_80,
   94usize => &NESTED_GOTO_94,
   120usize => &NESTED_GOTO_120,
   25usize => &NESTED_GOTO_25,
   99usize => &NESTED_GOTO_99,
   43usize => &NESTED_GOTO_43,
   103usize => &NESTED_GOTO_103,
   24usize => &NESTED_GOTO_24,
   105usize => &NESTED_GOTO_105,
   10usize => &NESTED_GOTO_10,
   52usize => &NESTED_GOTO_52,
   81usize => &NESTED_GOTO_81,
   98usize => &NESTED_GOTO_98,
   73usize => &NESTED_GOTO_73,
   6usize => &NESTED_GOTO_6,
   0usize => &NESTED_GOTO_0,
   110usize => &NESTED_GOTO_110,
   95usize => &NESTED_GOTO_95,
   9usize => &NESTED_GOTO_9
}
};

